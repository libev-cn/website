{"index":{"version":"2.1.0","fields":["title","body"],"fieldVectors":[["title/index.html",[0,0.617,1,0.388,2,0.159,3,0.803]],["body/index.html",[1,0.87,2,0.833,3,3.727,4,3.827,5,3.827,6,3.827,7,3.827,8,3.827,9,3.827,10,3.827,11,3.827,12,3.827,13,3.827,14,3.827,15,3.827,16,1.625,17,2.153,18,0.704]],["title/index.html#发展简介",[1,0.444]],["body/index.html#发展简介",[1,0.87,2,0.834,3,3.733,4,3.836,5,3.836,6,3.836,7,3.836,8,3.836,9,3.836,10,3.836,11,3.836,12,3.836,13,3.836,14,3.836,15,3.836,16,1.629,17,2.158,18,0.706]],["title/index.html#特性展示",[1,0.444]],["body/index.html#特性展示",[1,0.869,2,0.773,3,3.275,16,1.761,17,2.332,18,0.763]],["title/index.html#译者",[1,0.444]],["body/index.html#译者",[1,0.814]],["title/api/idle.html",[1,0.33,19,1.406]],["body/api/idle.html",[1,0.865,18,0.893,19,3.458,20,2.689,21,2.242,22,2.689,23,3.405,24,1.352,25,3.405,26,0.893,27,0.757,28,3.405,29,4.384,30,4.384,31,0.531,32,0.531,33,0.578,34,0.627,35,0.73,36,0.844,37,0.844,38,0.844,39,0.844,40,0.844,41,0.844,42,0.844,43,0.844,44,0.844,45,0.905,46,0.905,47,0.905,48,0.905,49,0.905,50,0.844,51,0.905,52,0.969,53,0.969,54,0.969,55,0.969,56,0.969,57,1.165,58,0.905,59,1.108,60,1.184,61,1.165,62,3.463,63,1.265,64,0.94,65,1.108,66,1.036,67,1.915,68,1.446,69,0.969,70,0.905,71,2.242,72,2.689,73,2.689,74,2.689,75,0.786,76,0.872,77,0.969]],["title/api/idle.html#基本介绍",[1,0.444]],["body/api/idle.html#基本介绍",[1,0.859,19,3.405,20,3.497,21,2.915,22,3.497]],["title/api/idle.html#相关函数",[1,0.444]],["body/api/idle.html#相关函数",[1,0.835,19,3.337,23,4.525,24,1.797,25,4.525,26,0.833,27,0.706,28,4.525]],["title/api/idle.html#使用示例",[1,0.444]],["body/api/idle.html#使用示例",[1,0.859,18,0.928,19,3.063,26,0.851,27,0.722,29,4.626,30,4.626,31,0.578,32,0.578,33,0.629,34,0.682,35,0.795,36,0.918,37,0.918,38,0.918,39,0.918,40,0.918,41,0.918,42,0.918,43,0.918,44,0.918,45,0.984,46,0.984,47,0.984,48,0.984,49,0.984,50,0.918,51,0.984,52,1.054,53,1.054,54,1.054,55,1.054,56,1.054,57,1.229,58,0.984,59,1.206,60,1.289,61,1.229,62,3.654,63,1.377,64,0.992,65,1.206,66,1.128,67,2.084,68,1.574,69,1.054,70,0.984,71,2.44,72,2.927,73,2.927,74,2.927,75,0.855,76,0.92,77,1.054]],["title/api/child.html",[1,0.33,78,1.406]],["body/api/child.html",[1,0.867,2,0.707,17,2.549,18,0.834,24,1.005,26,0.66,27,0.56,31,0.797,32,0.56,33,0.609,34,0.66,35,0.543,36,0.627,37,0.627,38,0.627,39,0.627,40,0.627,41,0.627,42,0.627,43,0.627,44,0.627,45,0.672,46,0.672,47,0.672,48,0.672,49,0.672,50,0.627,51,0.672,52,0.72,53,0.72,54,0.72,55,0.72,56,0.72,57,1.204,58,0.672,59,0.824,60,0.88,61,0.953,63,1.548,64,1.155,65,0.824,66,1.092,67,1.424,68,1.075,69,0.72,70,0.672,75,0.584,76,1.039,77,0.72,78,3.366,79,3.587,80,3.291,81,2.531,82,2.531,83,4.784,84,4.784,85,2.531,86,4.495,87,3.665,88,3.587,89,3.587,90,3.665,91,2.344,92,0.824,93,1.424,94,1.323,95,1.233,96,1.424,97,1.075,98,1.667,99,1.667,100,1.537,101,1.667,102,1.667,103,1.667,104,1.667,105,1.667,106,1.667,107,1.667,108,1.667,109,1.667,110,1.999,111,1.424,112,1.999,113,3.587,114,1.667,115,2.531,116,2.531,117,1.999,118,4.166,119,2.531,120,2.531,121,2.531,122,1.999,123,4.166,124,4.166,125,2.531,126,2.531,127,2.531,128,2.531,129,2.531,130,2.531]],["title/api/child.html#基本介绍",[1,0.444]],["body/api/child.html#基本介绍",[1,0.868,2,0.841,17,2.697,31,0.613,32,0.613,33,0.667,34,0.723,78,3.49,79,4.795,80,4.088,81,3.928]],["title/api/child.html#相关函数",[1,0.444]],["body/api/child.html#相关函数",[1,0.859,24,1.575,31,0.753,64,1.224,76,1.034,78,3.156,82,3.966,83,5.542,84,5.542,85,3.966,86,4.573,87,4.243,88,4.823,89,4.823,90,4.243,91,2.924]],["title/api/child.html#使用示例",[1,0.444]],["body/api/child.html#使用示例",[1,0.861,17,2.362,18,0.919,26,0.773,27,0.655,31,0.779,32,0.497,33,0.541,34,0.587,35,0.684,36,0.79,37,0.79,38,0.79,39,0.79,40,0.79,41,0.79,42,0.79,43,0.79,44,0.79,45,0.847,46,0.847,47,0.847,48,0.847,49,0.847,50,0.79,51,0.847,52,0.906,53,0.906,54,0.906,55,0.906,56,0.906,57,1.326,58,0.847,59,1.037,60,1.108,61,1.115,63,1.745,64,1.007,65,1.037,66,1.278,67,1.792,68,1.353,69,0.906,70,0.847,75,0.735,76,1.032,77,0.906,78,2.55,86,4.391,87,2.803,90,2.803,92,1.037,93,1.792,94,1.666,95,1.552,96,1.792,97,1.353,98,2.098,99,2.098,100,1.935,101,2.098,102,2.098,103,2.098,104,2.098,105,2.098,106,2.098,107,2.098,108,2.098,109,2.098,110,2.517,111,1.792,112,2.517,113,4.199,114,2.098,115,3.186,116,3.186,117,2.517,118,4.696,119,3.186,120,3.186,121,3.186,122,2.517,123,4.696,124,4.696,125,3.186,126,3.186,127,3.186,128,3.186,129,3.186,130,3.186]],["title/api/io.html",[1,0.33,131,1.302]],["body/api/io.html",[0,1.397,1,0.871,2,0.677,16,1.957,18,0.798,20,1.817,24,0.913,26,0.727,27,0.616,31,0.522,32,0.522,33,0.569,34,0.616,35,0.718,36,0.57,37,0.57,38,0.57,39,0.57,40,0.57,41,0.57,42,0.57,43,0.57,44,0.57,45,0.611,46,0.611,47,0.611,48,0.611,49,0.611,50,0.57,51,0.611,52,0.654,53,0.654,54,0.654,55,0.654,56,0.654,57,1.049,58,0.611,59,0.748,61,0.89,63,0.855,64,1.065,65,0.748,66,0.7,69,0.654,70,0.611,75,0.531,76,0.786,77,0.654,92,0.748,93,1.294,94,1.202,95,1.12,96,1.294,97,0.977,111,1.294,114,2.205,131,2.965,132,2.3,133,2.3,134,3.349,135,2.3,136,2.3,137,1.817,138,1.294,139,1.045,140,1.514,141,2.3,142,2.3,143,3.641,144,3.167,145,3.349,146,2.645,147,2.205,148,2.3,149,2.3,150,2.3,151,2.3,152,2.3,153,3.949,154,2.645,155,2.3,156,2.3,157,1.514,158,2.405,159,3.641,160,3.949,161,2.398,162,2.645,163,2.3,164,2.405,165,1.817,166,2.645,167,1.514,168,4.337,169,4.337,170,2.3,171,2.3,172,2.645,173,1.817,174,2.645,175,1.817]],["title/api/io.html#基本介绍",[1,0.444]],["body/api/io.html#基本介绍",[1,0.872,2,0.728,16,2.11,20,2.488,31,0.491,32,0.491,33,0.535,34,0.58,35,0.676,131,1.772,132,3.15,133,3.15,134,4.167,135,3.15,136,3.15,137,2.488,138,1.772,139,1.431,140,2.074,141,3.15,142,3.15,143,4.082,144,2.074,145,4.167,146,3.291,147,2.074,148,3.15,149,3.15,150,3.15,151,3.15,152,3.15,153,4.669,154,3.291,155,3.15,156,3.15,157,2.074]],["title/api/io.html#相关函数",[1,0.444]],["body/api/io.html#相关函数",[1,0.86,2,0.631,24,1.606,26,0.744,27,0.631,64,1.195,131,3.185,144,3.584,158,2.904,159,4.402,160,5.242,161,2.964,162,3.855,163,4.044,164,2.904]],["title/api/io.html#使用示例",[1,0.444]],["body/api/io.html#使用示例",[0,2.072,1,0.862,16,1.449,18,0.943,26,0.808,27,0.685,31,0.532,32,0.532,33,0.579,34,0.628,35,0.732,36,0.845,37,0.845,38,0.845,39,0.845,40,0.845,41,0.845,42,0.845,43,0.845,44,0.845,45,0.906,46,0.906,47,0.906,48,0.906,49,0.906,50,0.845,51,0.906,52,0.971,53,0.971,54,0.971,55,0.971,56,0.971,57,1.29,58,0.906,59,1.11,61,1.166,63,1.268,64,0.942,65,1.11,66,1.038,69,0.971,70,0.906,75,0.787,76,0.966,77,0.971,92,1.11,93,1.919,94,1.784,95,1.662,96,1.919,97,1.449,111,1.919,114,2.89,131,2.73,144,2.247,147,2.247,158,2.45,161,2.072,164,2.45,165,2.695,166,3.468,167,2.247,168,5.125,169,5.125,170,3.412,171,3.412,172,3.468,173,2.695,174,3.468,175,2.695]],["title/api/loop.html",[1,0.33,27,0.361]],["body/api/loop.html",[1,0.871,2,0.77,16,1.262,17,2.255,18,0.982,26,0.776,27,0.77,31,0.727,32,0.625,33,0.579,34,0.628,35,0.637,36,0.736,37,0.736,38,0.928,39,0.736,40,0.846,41,0.585,42,0.585,43,0.585,44,0.585,45,0.388,46,0.627,47,0.388,48,0.388,49,0.388,50,0.362,51,0.388,52,0.416,53,0.416,54,0.416,55,0.416,56,0.416,57,0.388,58,0.388,61,0.907,64,0.905,68,0.62,69,0.416,70,0.627,71,0.962,75,1.12,76,0.745,77,0.416,78,0.887,92,0.475,97,0.62,137,3.679,138,1.672,139,1.821,140,2.247,144,2.639,159,1.865,161,2.434,162,3.166,176,2.972,177,3.413,178,3.582,179,2.361,180,1.154,181,1.461,182,2.972,183,1.154,184,3.166,185,2.696,186,3.747,187,2.361,188,2.972,189,3.747,190,1.461,191,2.361,192,1.461,193,2.361,194,1.461,195,1.461,196,1.434,197,2.347,198,1.154,199,1.461,200,1.434,201,1.865,202,0.887,203,1.154,204,1.461,205,1.865,206,3.332,207,1.461,208,2.361,209,1.461,210,2.361,211,1.461,212,1.461,213,1.461,214,1.461,215,2.361,216,1.461,217,2.361,218,2.361,219,1.461,220,2.361,221,1.461,222,1.461,223,2.361,224,2.361,225,0.962,226,1.461,227,1.461,228,1.461,229,2.972,230,1.865,231,1.461,232,1.461,233,2.361,234,2.361,235,1.461,236,2.361,237,1.461,238,1.461,239,2.972,240,1.461,241,1.461,242,1.154,243,1.461,244,1.461,245,2.972,246,1.461,247,1.461,248,1.461,249,1.461,250,1.461,251,1.461,252,1.461,253,1.461,254,1.461,255,1.461,256,1.461,257,2.361,258,1.461,259,2.361,260,1.461,261,3.029,262,1.154,263,1.461,264,1.461,265,1.461,266,1.865,267,1.461,268,1.461,269,2.361,270,1.461,271,1.865,272,1.865,273,1.461,274,0.764,275,1.461,276,1.461,277,1.461,278,1.461,279,1.154]],["title/api/loop.html#基本介绍",[1,0.444]],["body/api/loop.html#基本介绍",[1,0.758,2,0.728,26,0.859,27,0.728]],["title/api/loop.html#相关函数",[1,0.444]],["body/api/loop.html#相关函数",[1,0.871,2,0.768,16,1.305,17,2.305,18,0.978,26,0.707,27,0.754,31,0.72,32,0.599,33,0.522,34,0.565,35,0.527,36,0.609,37,0.609,38,0.87,39,0.609,40,0.761,41,0.38,42,0.38,43,0.38,44,0.38,45,0.408,46,0.653,47,0.408,48,0.408,49,0.408,50,0.38,51,0.408,52,0.437,53,0.437,54,0.437,55,0.437,56,0.437,61,0.816,64,0.879,68,0.652,70,0.408,71,1.011,75,1.115,76,0.611,78,0.932,92,0.499,97,0.652,137,3.736,138,1.728,139,1.862,140,2.312,144,2.698,159,1.941,161,2.489,162,3.237,176,3.072,177,3.512,178,3.643,179,2.457,180,1.212,181,1.535,182,3.072,183,1.212,184,3.237,185,2.774,186,3.842,187,2.457,188,3.072,189,3.842,190,1.535,191,2.457,192,1.535,193,2.457,194,1.535,195,1.535,196,1.492,197,2.427,198,1.212,199,1.535,200,1.492,201,1.941,202,0.932,203,1.212,204,1.535,205,1.941,206,3.399,207,1.535,208,2.457,209,1.535,210,2.457,211,1.535,212,1.535,213,1.535,214,1.535,215,2.457,216,1.535,217,2.457,218,2.457,219,1.535,220,2.457,221,1.535,222,1.535,223,2.457,224,2.457,225,1.011,226,1.535,227,1.535,228,1.535,229,3.072,230,1.941,231,1.535,232,1.535,233,2.457,234,2.457,235,1.535,236,2.457,237,1.535,238,1.535,239,3.072,240,1.535,241,1.535,242,1.212,243,1.535,244,1.535,245,3.072,246,1.535,247,1.535,248,1.535,249,1.535,250,1.535,251,1.535,252,1.535,253,1.535,254,1.535,255,1.535,256,1.535,257,2.457,258,1.535,259,2.457,260,1.535,261,3.091,262,1.212,263,1.535,264,1.535,265,1.535,266,1.941,267,1.535,268,1.535,269,2.457,270,1.535,271,1.941,272,1.941,273,1.535,274,0.802,275,1.535,276,1.535,277,1.535,278,1.535,279,1.212]],["title/api/loop.html#使用示例",[1,0.444]],["body/api/loop.html#使用示例",[1,0.858,18,0.913,26,0.765,27,0.649,31,0.649,32,0.649,33,0.706,34,0.765,35,0.892,36,1.03,37,1.03,38,1.03,39,1.03,40,1.03,41,1.03,42,1.03,43,1.03,44,1.03,57,1.104,58,1.104,61,1.104,64,0.892,69,1.183,70,1.104,75,0.959,76,0.987,77,1.183]],["title/api/signal.html",[1,0.33,202,1.406]],["body/api/signal.html",[0,1.641,1,0.869,2,0.851,18,0.795,22,2.967,24,1.073,26,0.691,27,0.728,31,0.586,32,0.586,33,0.638,34,0.497,35,0.58,36,0.67,37,0.67,38,0.67,39,0.67,40,0.67,41,0.67,42,0.67,43,0.67,44,0.67,45,0.718,46,0.718,47,0.718,48,0.718,49,0.718,50,0.67,51,0.718,52,0.769,53,0.769,54,0.769,55,0.769,56,0.769,57,0.998,58,0.718,59,0.879,60,0.94,61,0.998,63,1.004,64,1.052,65,0.879,66,0.823,67,1.52,68,1.148,69,0.769,70,0.718,75,0.624,76,0.747,77,0.769,80,2.135,91,1.52,92,0.879,112,2.135,146,2.135,165,2.135,200,1.641,201,2.135,202,3.348,203,2.967,280,4.316,281,2.703,282,3.756,283,4.312,284,3.756,285,2.703,286,2.703,287,3.756,288,2.703,289,2.703,290,2.703,291,2.703,292,2.703,293,2.703,294,3.756,295,2.703,296,2.703,297,4.665,298,2.703,299,2.967,300,3.756,301,2.703,302,2.703,303,2.703]],["title/api/signal.html#基本介绍",[1,0.444]],["body/api/signal.html#基本介绍",[1,0.87,2,0.887,22,3.44,27,0.679,31,0.526,32,0.526,33,0.572,80,2.662,146,2.662,200,2.046,201,2.662,202,3.207,203,3.44,280,4.825,281,3.37,282,4.355,283,3.831,284,4.355,285,3.37,286,3.37,287,4.355,288,3.37,289,3.37,290,3.37,291,3.37,292,3.37,293,3.37,294,4.355,295,3.37]],["title/api/signal.html#相关函数",[1,0.444]],["body/api/signal.html#相关函数",[1,0.826,24,1.772,64,1.172,91,2.51,202,3.414,296,4.463,297,5.621,298,4.463]],["title/api/signal.html#使用示例",[1,0.444]],["body/api/signal.html#使用示例",[0,2.23,1,0.86,18,0.925,26,0.847,27,0.718,31,0.573,32,0.573,33,0.623,34,0.676,35,0.788,36,0.91,37,0.91,38,0.91,39,0.91,40,0.91,41,0.91,42,0.91,43,0.91,44,0.91,45,0.976,46,0.976,47,0.976,48,0.976,49,0.976,50,0.91,51,0.976,52,1.045,53,1.045,54,1.045,55,1.045,56,1.045,57,1.222,58,0.976,59,1.195,60,1.277,61,1.222,63,1.365,64,0.987,65,1.195,66,1.118,67,2.066,68,1.559,69,1.045,70,0.976,75,0.847,76,0.915,77,1.045,92,1.195,112,2.901,165,2.901,202,2.793,283,4.418,299,3.633,300,4.6,301,3.672,302,3.672,303,3.672]],["title/api/stat.html",[1,0.33,196,1.406]],["body/api/stat.html",[1,0.87,2,0.774,16,0.973,18,0.797,24,1.326,26,0.725,27,0.521,31,0.521,32,0.521,33,0.567,34,0.615,35,0.716,36,0.568,37,0.568,38,0.568,39,0.568,40,0.568,41,0.568,42,0.568,43,0.568,44,0.568,45,0.609,46,0.609,47,0.609,48,0.609,49,0.609,50,0.568,51,0.609,52,0.652,53,0.652,54,0.652,55,0.652,56,0.652,57,0.887,58,0.609,59,0.745,60,0.796,61,0.887,63,0.851,64,0.716,65,0.745,66,0.697,67,1.288,68,0.973,69,0.652,70,0.609,75,0.529,76,0.916,77,0.652,91,2.435,92,0.745,97,0.973,138,2.216,139,1.517,167,2.594,196,3.4,197,3.794,225,2.198,299,1.809,304,4.832,305,2.709,306,2.709,307,2.29,308,3.939,309,2.29,310,2.29,311,2.29,312,2.29,313,2.29,314,2.29,315,2.29,316,2.29,317,2.29,318,3.111,319,3.635,320,3.111,321,4.329,322,2.29,323,2.29,324,3.939,325,3.338,326,3.338,327,2.29,328,2.29,329,2.29,330,3.338,331,2.29,332,2.29,333,2.29,334,2.29,335,2.29,336,2.29,337,2.29,338,3.939,339,3.338,340,2.29,341,2.29,342,2.29,343,2.29]],["title/api/stat.html#基本介绍",[1,0.444]],["body/api/stat.html#基本介绍",[1,0.871,2,0.832,16,1.356,31,0.498,32,0.498,33,0.542,34,0.588,35,0.685,97,1.356,138,2.644,139,1.911,196,3.388,197,4.21,225,2.768,304,4.993,307,3.193,308,4.701,309,3.193,310,3.193,311,3.193,312,3.193,313,3.193,314,3.193,315,3.193,316,3.193]],["title/api/stat.html#相关函数",[1,0.444]],["body/api/stat.html#相关函数",[1,0.865,2,0.565,18,0.667,24,1.811,26,0.667,76,0.908,91,2.947,167,3.287,196,3.347,304,4.391,317,3.623,318,3.943,319,4.265,320,3.943,321,5.239,322,3.623,323,3.623,324,4.992,325,4.561,326,4.561,327,3.623,328,3.623,329,3.623,330,4.561,331,3.623,332,3.623,333,3.623,334,3.623,335,3.623,336,3.623,337,3.623]],["title/api/stat.html#使用示例",[1,0.444]],["body/api/stat.html#使用示例",[1,0.859,18,0.927,26,0.85,27,0.721,31,0.577,32,0.577,33,0.628,34,0.681,35,0.793,36,0.916,37,0.916,38,0.916,39,0.916,40,0.916,41,0.916,42,0.916,43,0.916,44,0.916,45,0.982,46,0.982,47,0.982,48,0.982,49,0.982,50,0.916,51,0.982,52,1.052,53,1.052,54,1.052,55,1.052,56,1.052,57,1.227,58,0.982,59,1.203,60,1.286,61,1.227,63,1.374,64,0.991,65,1.203,66,1.125,67,2.08,68,1.57,69,1.052,70,0.982,75,0.853,76,1.002,77,1.052,92,1.203,196,2.805,299,2.92,338,5.038,339,4.619,340,3.697,341,3.697,342,3.697,343,3.697]],["title/base/used.html",[1,0.444]],["body/base/used.html",[1,0.866,2,0.444,16,1.654,18,0.878,21,2.564,26,0.524,27,0.608,31,0.444,32,0.692,33,0.484,34,0.524,35,0.611,36,0.706,37,0.706,38,0.706,39,0.706,40,0.706,41,0.706,42,0.706,43,0.706,44,0.706,45,0.757,46,0.757,47,0.757,48,0.757,49,0.757,50,0.965,51,0.757,52,0.81,53,0.81,54,0.81,55,0.81,56,0.81,57,1.035,58,0.757,59,0.927,60,1.354,61,1.179,63,1.649,64,0.952,65,1.267,66,1.185,68,1.209,69,0.81,70,0.757,75,1.153,76,0.949,77,0.81,92,0.927,93,1.602,94,2.036,95,1.387,96,1.602,97,1.209,98,1.875,99,1.875,100,2.365,101,1.875,102,1.875,103,1.875,104,1.875,105,1.875,106,1.875,107,1.875,108,1.875,109,1.875,131,2.496,147,3.289,158,2.045,161,1.73,164,2.045,166,3.076,173,2.25,174,3.076,175,2.25,261,3.187,262,2.25,274,2.494,344,2.25,345,2.25,346,2.25,347,2.797,348,2.25,349,2.25,350,2.25,351,2.25,352,2.25,353,3.894,354,3.426,355,2.848,356,3.505,357,3.076,358,2.564,359,2.045,360,3.076,361,3.904,362,2.045,363,2.848,364,2.848,365,2.25]],["title/base/used.html#使用示例",[1,0.444]],["body/base/used.html#使用示例",[1,0.863,16,1.752,18,0.909,21,2.716,26,0.571,27,0.484,31,0.484,32,0.484,33,0.527,34,0.571,35,0.665,36,0.769,37,0.769,38,0.769,39,0.769,40,0.769,41,0.769,42,0.769,43,0.769,44,0.769,45,0.824,46,0.824,47,0.824,48,0.824,49,0.824,50,0.769,51,0.824,52,0.882,53,0.882,54,0.882,55,0.882,56,0.882,57,1.096,58,0.824,59,1.009,60,1.434,61,1.231,63,1.722,64,0.994,65,1.342,66,1.255,68,1.317,69,0.882,70,0.824,75,1.069,76,0.983,77,0.882,92,1.009,93,1.745,94,1.621,95,1.511,96,1.745,97,1.317,98,2.042,99,2.042,100,1.884,101,2.042,102,2.042,103,2.042,104,2.042,105,2.042,106,2.042,107,2.042,108,2.042,109,2.042,131,2.32,147,3.051,158,2.228,161,1.884,164,2.228,166,3.258,173,2.45,174,3.258,175,2.45,261,2.962,262,2.45,274,2.156,344,2.45,345,2.45,346,2.45,347,2.228,348,2.45,349,2.45,350,2.45,351,2.45,352,2.45,353,4.125,354,2.729,355,3.102,356,3.66,357,3.258,358,2.042,359,2.228,360,3.258,361,3.629,362,2.228]],["title/base/used.html#示例讲解",[1,0.444]],["body/base/used.html#示例讲解",[1,0.864,2,0.644,27,0.644,32,0.771,50,1.022,75,1.14,94,2.157,100,2.505,131,2.321,147,3.252,261,2.963,274,2.582,347,2.963,354,3.629,358,2.716,361,3.629,363,4.126,364,4.126,365,3.259]],["title/api/timer.html",[1,0.33,274,1.21]],["body/api/timer.html",[1,0.871,2,0.739,18,0.961,21,3.193,24,1.687,26,0.677,27,0.574,31,0.829,32,0.771,33,0.866,34,0.737,35,0.789,36,0.65,37,0.912,38,0.65,39,0.65,40,0.65,41,0.65,42,0.65,43,0.65,44,0.65,45,0.697,46,0.697,47,0.697,48,0.697,49,0.697,50,0.65,51,0.697,52,0.747,53,0.747,54,0.747,55,0.747,56,0.747,57,1.129,58,0.697,59,0.854,60,0.913,61,0.978,63,0.975,64,0.789,65,0.854,66,0.799,69,0.747,70,0.697,75,0.749,76,0.984,77,0.747,91,0.938,92,0.854,95,0.812,111,1.476,139,0.758,157,1.098,206,1.317,266,1.317,271,2.563,272,3.511,274,2.754,320,3.356,352,2.073,356,2.563,357,2.906,358,2.423,359,2.873,360,2.906,362,3.192,366,1.317,367,2.906,368,2.624,369,3.237,370,1.668,371,3.911,372,3.245,373,4.266,374,3.245,375,2.624,376,4.001,377,1.668,378,1.668,379,1.668,380,1.668,381,2.624,382,4.001,383,3.245,384,1.668,385,1.317,386,1.668,387,1.668,388,1.668,389,1.668,390,1.668,391,3.245,392,1.668,393,1.668]],["title/api/timer.html#基本介绍",[1,0.444]],["body/api/timer.html#基本介绍",[1,0.871,2,0.812,18,0.853,21,3.481,24,1.84,31,0.845,32,0.812,33,0.846,34,0.622,75,0.538,76,0.922,95,1.134,139,1.059,157,1.534,206,1.84,271,3.142,272,3.937,274,2.669,356,3.142,358,2.225,359,2.427,362,3.327,366,1.84,367,3.446,368,3.38,369,3.499,370,2.33,371,4.076,372,3.977,373,3.499,374,3.977,375,3.38,376,4.633,377,2.33,378,2.33,379,2.33,380,2.33,381,3.38,382,4.633,383,3.977,384,2.33,385,1.84,386,2.33,387,2.33,388,2.33,389,2.33,390,2.33]],["title/api/timer.html#相关函数",[1,0.444]],["body/api/timer.html#相关函数",[1,0.868,18,0.996,24,1.031,26,0.844,27,0.715,31,0.754,32,0.57,33,0.85,34,0.777,35,0.983,36,0.905,37,1.136,38,0.905,39,0.905,40,0.905,41,0.905,42,0.905,43,0.905,44,0.905,45,0.97,46,0.97,47,0.97,48,0.97,49,0.97,50,0.905,51,0.97,52,1.039,53,1.039,54,1.039,55,1.039,56,1.039,57,1.331,58,0.97,59,1.188,60,1.27,61,1.218,63,1.357,64,0.983,65,1.188,66,1.111,69,1.039,70,0.97,75,0.843,76,0.997,77,1.039,91,1.46,92,1.188,111,2.054,266,2.05,274,2.746,320,3.957,352,2.884,357,3.62,358,2.404,359,3.033,360,3.62,362,2.622,369,2.283,371,3.212,373,4.527,391,4.224,392,2.595,393,2.595]],["title/base/install.html",[1,0.444]],["body/base/install.html",[0,2.873,1,0.833,2,0.688,18,0.365,19,0.899,26,0.365,27,0.309,31,0.505,32,0.505,33,0.549,34,0.552,35,0.583,36,0.674,37,0.674,38,0.674,39,0.674,40,0.674,41,0.591,42,0.591,43,0.591,44,0.674,45,0.527,46,0.527,47,0.527,48,0.634,49,0.527,50,0.491,51,0.527,52,0.421,53,0.421,54,0.421,55,0.421,56,0.421,57,0.527,58,0.393,59,0.274,60,0.946,61,0.224,62,1.169,64,0.425,65,0.274,66,0.451,69,0.564,70,0.224,71,2.13,72,0.665,73,0.665,74,0.665,75,0.194,76,0.394,77,0.239,92,0.482,93,0.833,94,0.774,95,0.721,96,0.833,97,0.629,98,0.975,99,0.975,100,0.899,101,0.975,102,0.975,103,0.975,104,0.975,105,0.975,106,0.975,107,0.975,108,0.975,109,0.975,110,0.665,111,0.473,114,0.975,117,0.665,122,1.566,138,0.473,139,1.47,140,0.554,143,2.98,154,1.169,157,0.975,167,0.554,172,0.665,178,1.885,180,0.665,183,1.566,184,0.665,185,0.665,198,0.665,200,0.899,205,0.665,225,0.554,230,1.566,242,2.148,279,0.665,318,0.665,319,1.169,344,1.169,345,1.169,346,1.169,347,1.063,348,1.169,349,1.169,350,1.169,351,1.169,365,1.169,366,0.665,367,0.665,385,0.665,394,0.842,395,0.842,396,0.842,397,0.842,398,0.842,399,0.842,400,0.842,401,1.302,402,0.842,403,0.842,404,2.638,405,0.842,406,0.842,407,0.842,408,0.842,409,0.842,410,0.842,411,0.842,412,0.842,413,3.91,414,2.393,415,0.842,416,1.481,417,1.481,418,1.481,419,0.842,420,0.842,421,1.982,422,0.842,423,0.842,424,0.842,425,1.481,426,0.842,427,0.842,428,0.842,429,0.842,430,0.842,431,0.842,432,1.481,433,1.481,434,0.842,435,0.842,436,0.842,437,1.481,438,0.842,439,0.842,440,0.842,441,0.842,442,0.842,443,0.842,444,2.72,445,0.842,446,0.842,447,5.14,448,3.91,449,0.842,450,1.481,451,1.481,452,2.999,453,0.842,454,4.033,455,0.842,456,1.481,457,1.481,458,0.842,459,0.842,460,0.842,461,0.842,462,0.842,463,0.842,464,1.481,465,0.842,466,4.331,467,3.617,468,0.842,469,0.842,470,0.842,471,1.481,472,1.481,473,1.481,474,1.481,475,1.481,476,1.481,477,0.842,478,0.842,479,0.842,480,0.842,481,0.842,482,0.842,483,0.842,484,0.842,485,0.842,486,0.842,487,0.842,488,0.842,489,0.842,490,0.842,491,0.842,492,0.842,493,0.842,494,0.842,495,0.842,496,0.842,497,0.842,498,0.842,499,0.842,500,0.842,501,0.842,502,0.842,503,0.842,504,0.842,505,0.842,506,0.842,507,0.842,508,0.842,509,0.842,510,0.842,511,0.842,512,0.842,513,0.842,514,0.842,515,0.842,516,0.842,517,0.842,518,0.842,519,0.842,520,0.842,521,0.842,522,0.842,523,0.842,524,0.842,525,0.842,526,0.842,527,0.842,528,0.842,529,0.842,530,0.842,531,0.842,532,0.842,533,0.842,534,0.842,535,0.842,536,0.842,537,0.842,538,0.842,539,0.842,540,0.842,541,0.842,542,0.842,543,0.842,544,0.842,545,0.842,546,5.854,547,1.481,548,3.236,549,4.413,550,2.387,551,0.842,552,5.617,553,0.842,554,0.842,555,0.842,556,2.72,557,2.387,558,0.842,559,1.481,560,0.842,561,3.44,562,0.842,563,1.982,564,0.842,565,0.842,566,0.842,567,0.842,568,1.481,569,4.872,570,1.481,571,1.982,572,2.72,573,0.842,574,1.481,575,2.387,576,0.842,577,1.982,578,3.644,579,2.72,580,3.44,581,3.617,582,1.982,583,0.842,584,0.842,585,0.842,586,1.481,587,0.842,588,0.842,589,0.842,590,1.481,591,1.481,592,0.842,593,2.387,594,1.481,595,2.72,596,2.72,597,0.842,598,0.842,599,0.842,600,0.842,601,1.481,602,0.842,603,0.842,604,0.842,605,1.481,606,1.982,607,1.982,608,0.842,609,0.842,610,3.772,611,1.481,612,2.387,613,2.387,614,0.842,615,1.481,616,1.481,617,1.982,618,1.982,619,0.842,620,3.44,621,3.44,622,0.842,623,2.387,624,0.842,625,0.842,626,1.481,627,1.481,628,1.481,629,0.842,630,0.842,631,0.842,632,1.481,633,0.842,634,4.142,635,0.842,636,0.842,637,0.842,638,0.842,639,0.842,640,2.387,641,0.842,642,1.982,643,2.387,644,0.842,645,0.842,646,0.842,647,1.481,648,0.842,649,0.842,650,0.842,651,0.842,652,3.617,653,0.842,654,0.842,655,0.842,656,0.842,657,0.842,658,0.842,659,0.842,660,0.842,661,0.842,662,0.842,663,0.842,664,0.842,665,0.842,666,0.842,667,0.842,668,3.617,669,1.481,670,0.842,671,0.842,672,0.842,673,1.481,674,2.72,675,2.72,676,1.481,677,0.842,678,1.982,679,0.842,680,2.72,681,0.842,682,0.842,683,0.842,684,0.842,685,0.842,686,0.842,687,0.842,688,0.842,689,0.842,690,1.982,691,3.91,692,3.91,693,1.982,694,1.982,695,1.982,696,1.982,697,1.982,698,1.982,699,1.982,700,1.982,701,1.982,702,1.982,703,0.842,704,0.842,705,0.842,706,0.842,707,0.842,708,0.842,709,0.842,710,0.842,711,1.982,712,0.842,713,0.842,714,0.842,715,2.72,716,0.842,717,0.842,718,4.033,719,2.387,720,2.72,721,2.387,722,2.387,723,1.982,724,1.481,725,2.999,726,3.44,727,2.72,728,2.999,729,2.999,730,2.999,731,2.387,732,1.982,733,1.481,734,0.842,735,0.842,736,1.481,737,0.842,738,0.842,739,1.481,740,0.842,741,0.842,742,0.842,743,1.481,744,1.481,745,1.481,746,1.481,747,0.842,748,2.72,749,2.387,750,1.982,751,1.481,752,1.481,753,0.842,754,0.842,755,0.842,756,0.842,757,0.842,758,2.72,759,1.481,760,3.772,761,3.772,762,1.744,763,0.842,764,0.842,765,1.481,766,2.72,767,2.72,768,2.72,769,2.999,770,2.72,771,0.842,772,1.982,773,1.481,774,0.842,775,0.842,776,1.481,777,1.481,778,1.481,779,0.842,780,0.842,781,0.842,782,0.842,783,1.982,784,0.842,785,1.982,786,0.842,787,0.842,788,0.842,789,0.842,790,0.842,791,0.842,792,2.387,793,0.842,794,0.842,795,0.842,796,0.842,797,1.982,798,0.842,799,0.842,800,1.982,801,0.842,802,0.842,803,0.842,804,0.842,805,0.842,806,0.842,807,0.842,808,0.842,809,0.842,810,0.842,811,0.842,812,0.842,813,0.842,814,0.842,815,1.481,816,0.842,817,0.842,818,1.481,819,0.842,820,0.842,821,0.842,822,1.481,823,0.842,824,0.842,825,0.842,826,0.842,827,0.842,828,0.842,829,0.842,830,0.842,831,0.842,832,0.842]],["title/base/install.html#版本简述",[1,0.444]],["body/base/install.html#版本简述",[1,0.846,139,2.344,140,2.923,200,2.695,205,3.506,394,4.439,395,4.439,396,4.439,397,4.439,398,4.439,399,4.439,400,4.439,401,3.905]],["title/base/install.html#命名规则",[1,0.444]],["body/base/install.html#命名规则",[1,0.838,2,0.821,402,4.601]],["title/base/install.html#下载源码",[1,0.444]],["body/base/install.html#下载源码",[1,0.844,2,0.922,403,4.356,404,3.832,405,4.356,406,4.356,407,4.356,408,4.356,409,4.356,410,4.356,411,4.356,412,4.356]],["title/base/install.html#编译安装",[1,0.444]],["body/base/install.html#编译安装",[0,2.946,1,0.801,2,0.334,26,0.171,27,0.145,31,0.451,32,0.451,33,0.491,34,0.47,35,0.548,36,0.633,37,0.633,38,0.633,39,0.633,40,0.633,41,0.53,42,0.53,43,0.53,44,0.633,45,0.428,46,0.428,47,0.428,48,0.568,49,0.428,50,0.399,51,0.428,52,0.459,53,0.459,54,0.459,55,0.459,56,0.459,57,0.246,58,0.246,60,0.743,66,0.282,76,0.184,92,0.524,93,0.907,94,0.843,95,0.785,96,0.907,97,0.684,98,1.061,99,1.061,100,0.979,101,1.061,102,1.061,103,1.061,104,1.061,105,1.061,106,1.061,107,1.061,108,1.061,109,1.061,110,0.732,111,0.522,114,1.061,117,0.732,122,1.688,138,0.522,139,1.315,143,3.109,154,1.273,157,1.061,172,0.732,178,2.018,180,0.732,183,1.688,184,0.732,185,0.732,198,0.732,200,0.563,225,0.611,230,1.688,242,2.285,279,0.732,319,1.273,344,1.273,345,1.273,346,1.273,347,1.157,348,1.273,349,1.273,350,1.273,351,1.273,365,1.273,366,0.732,367,0.732,385,0.732,401,0.816,404,2.545,413,4.069,414,1.418,415,0.927,416,1.612,417,1.612,418,1.612,419,0.927,420,0.927,421,2.138,422,0.927,423,0.927,424,0.927,425,1.612,426,0.927,427,0.927,428,0.927,429,0.927,430,0.927,431,0.927,432,1.612,433,1.612,434,0.927,435,0.927,436,0.927,437,1.612,438,0.927,439,0.927,440,0.927,441,0.927,442,0.927,443,0.927,444,2.893,445,0.927,446,0.927,447,5.232,448,4.069,449,0.927,450,1.612,451,1.612,452,3.173,453,0.927,454,4.187,455,0.927,456,1.612,457,1.612,458,0.927,459,0.927,460,0.927,461,0.927,462,0.927,463,0.927,464,1.612,465,0.927,466,4.473,467,3.784,468,0.927,469,0.927,470,0.927,471,1.612,472,1.612,473,1.612,474,1.612,475,1.612,476,1.612,477,0.927,478,0.927,479,0.927,480,0.927,481,0.927,482,0.927,483,0.927,484,0.927,485,0.927,486,0.927,487,0.927,488,0.927,489,0.927,490,0.927,491,0.927,492,0.927,493,0.927,494,0.927,495,0.927,496,0.927,497,0.927,498,0.927,499,0.927,500,0.927,501,0.927,502,0.927,503,0.927,504,0.927,505,0.927,506,0.927,507,0.927,508,0.927,509,0.927,510,0.927,511,0.927,512,0.927,513,0.927,514,0.927,515,0.927,516,0.927,517,0.927,518,0.927,519,0.927,520,0.927,521,0.927,522,0.927,523,0.927,524,0.927,525,0.927,526,0.927,527,0.927,528,0.927,529,0.927,530,0.927,531,0.927,532,0.927,533,0.927,534,0.927,535,0.927,536,0.927,537,0.927,538,0.927,539,0.927,540,0.927,541,0.927,542,0.927,543,0.927,544,0.927,545,0.927,546,5.884,547,1.612,548,3.409,549,4.551,550,2.554,551,0.927,552,5.67,553,0.927,554,0.927,555,0.927,556,2.893,557,2.554,558,0.927,559,1.612,560,0.927,561,3.61,562,0.927,563,2.138,564,0.927,565,0.927,566,0.927,567,0.927,568,1.612,569,4.984,570,1.612,571,2.138,572,2.893,573,0.927,574,1.612,575,2.554,576,0.927,577,2.138,578,3.684,579,2.893,580,3.61,581,3.784,582,2.138,583,0.927,584,0.927,585,0.927,586,1.612,587,0.927,588,0.927,589,0.927,590,1.612,591,1.612,592,0.927,593,2.554,594,1.612,595,2.893,596,2.893,597,0.927,598,0.927,599,0.927,600,0.927,601,1.612,602,0.927,603,0.927,604,0.927,605,1.612,606,2.138,607,2.138,608,0.927,609,0.927,610,3.936,611,1.612,612,2.554,613,2.554,614,0.927,615,1.612,616,1.612,617,2.138,618,2.138,619,0.927,620,3.61,621,3.61,622,0.927,623,2.554,624,0.927,625,0.927,626,1.612,627,1.612,628,1.612,629,0.927,630,0.927,631,0.927,632,1.612,633,0.927,634,4.293,635,0.927,636,0.927,637,0.927,638,0.927,639,0.927,640,2.554,641,0.927,642,2.138,643,2.554,644,0.927,645,0.927,646,0.927,647,1.612,648,0.927,649,0.927,650,0.927,651,0.927,652,3.784,653,0.927,654,0.927,655,0.927,656,0.927,657,0.927,658,0.927,659,0.927,660,0.927,661,0.927,662,0.927,663,0.927,664,0.927,665,0.927,666,0.927,667,0.927,668,3.784,669,1.612,670,0.927,671,0.927,672,0.927,673,1.612,674,2.893,675,2.893,676,1.612,677,0.927,678,2.138,679,0.927,680,2.893,681,0.927,682,0.927,683,0.927,684,0.927,685,0.927,686,0.927,687,0.927,688,0.927,689,0.927,690,2.138,691,4.069,692,4.069,693,2.138,694,2.138,695,2.138,696,2.138,697,2.138,698,2.138,699,2.138,700,2.138,701,2.138,702,2.138,703,0.927,704,0.927,705,0.927,706,0.927,707,0.927,708,0.927,709,0.927,710,0.927,711,2.138,712,0.927,713,0.927,714,0.927,715,2.893,716,0.927,717,0.927,718,4.187,719,2.554,720,2.893,721,2.554,722,2.554,723,2.138,724,1.612,725,3.173,726,3.61,727,2.893,728,3.173,729,3.173,730,3.173,731,2.554,732,2.138,733,1.612,734,0.927,735,0.927,736,1.612,737,0.927,738,0.927,739,1.612,740,0.927,741,0.927,742,0.927,743,1.612,744,1.612,745,1.612,746,1.612,747,0.927,748,2.893,749,2.554,750,2.138,751,1.612,752,1.612,753,0.927,754,0.927,755,0.927,756,0.927,757,0.927,758,2.893,759,1.612,760,3.936,761,3.936,762,1.418,763,0.927,764,0.927,765,1.612,766,2.893,767,2.893,768,2.893,769,3.173,770,2.893,771,0.927,772,2.138,773,1.612,774,0.927,775,0.927,776,1.612,777,1.612,778,1.612,779,0.927,780,0.927,781,0.927,782,0.927,783,2.138,784,0.927,785,2.138,786,0.927,787,0.927,788,0.927,789,0.927,790,0.927,791,0.927,792,2.554,793,0.927,794,0.927,795,0.927,796,0.927,797,2.138,798,0.927,799,0.927,800,2.138,801,0.927,802,0.927,803,0.927,804,0.927,805,0.927,806,0.927,807,0.927,808,0.927,809,0.927,810,0.927,811,0.927,812,0.927,813,0.927,814,0.927,815,1.612,816,0.927,817,0.927,818,1.612,819,0.927,820,0.927]],["title/base/install.html#测试运行",[1,0.444]],["body/base/install.html#测试运行",[1,0.859,2,0.548,18,0.906,19,2.717,26,0.824,27,0.698,31,0.698,32,0.698,33,0.76,34,0.824,35,0.754,36,0.871,37,0.871,38,0.871,39,0.871,40,0.871,41,0.871,42,0.871,43,0.871,44,0.871,45,0.934,46,0.934,47,0.934,48,0.934,49,0.934,50,0.871,51,0.934,57,1.189,58,0.934,59,1.144,60,1.556,61,0.934,62,3.534,64,1.056,65,1.144,66,1.07,69,1.4,70,0.934,71,3.659,72,2.776,73,2.776,74,2.776,75,0.811,76,0.89,77,1,167,2.314,318,2.776,414,4.33,578,3.092,762,3.092,821,3.515,822,4.474,823,3.515,824,3.515,825,3.515,826,3.515,827,3.515,828,3.515,829,3.515,830,3.515,831,3.515,832,3.515]]],"invertedIndex":[["",{"_index":1,"title":{"index.html":{},"index.html#发展简介":{},"index.html#特性展示":{},"index.html#译者":{},"api/idle.html":{},"api/idle.html#基本介绍":{},"api/idle.html#相关函数":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#基本介绍":{},"api/child.html#相关函数":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#基本介绍":{},"api/io.html#相关函数":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#基本介绍":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#基本介绍":{},"api/signal.html#相关函数":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#基本介绍":{},"api/stat.html#相关函数":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/used.html#示例讲解":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#版本简述":{},"base/install.html#命名规则":{},"base/install.html#下载源码":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}},"body":{"index.html":{},"index.html#发展简介":{},"index.html#特性展示":{},"index.html#译者":{},"api/idle.html":{},"api/idle.html#基本介绍":{},"api/idle.html#相关函数":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#基本介绍":{},"api/child.html#相关函数":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#基本介绍":{},"api/io.html#相关函数":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#基本介绍":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#基本介绍":{},"api/signal.html#相关函数":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#基本介绍":{},"api/stat.html#相关函数":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/used.html#示例讲解":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#版本简述":{},"base/install.html#命名规则":{},"base/install.html#下载源码":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["0",{"_index":76,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#相关函数":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#相关函数":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["0.02",{"_index":316,"title":{},"body":{"api/stat.html":{},"api/stat.html#基本介绍":{}}}],["03",{"_index":418,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["1",{"_index":31,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#基本介绍":{},"api/child.html#相关函数":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#基本介绍":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#基本介绍":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#基本介绍":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["1.02",{"_index":315,"title":{},"body":{"api/stat.html":{},"api/stat.html#基本介绍":{}}}],["10",{"_index":40,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["100",{"_index":157,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["101",{"_index":516,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["102",{"_index":517,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["103",{"_index":518,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["104",{"_index":519,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["105",{"_index":520,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["106",{"_index":521,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["107",{"_index":522,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["108",{"_index":523,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["109",{"_index":524,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["11",{"_index":41,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["110",{"_index":525,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["111",{"_index":526,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["112",{"_index":527,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["113",{"_index":528,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["114",{"_index":529,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["115",{"_index":530,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["116",{"_index":531,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["117",{"_index":532,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["118",{"_index":533,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["119",{"_index":534,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["12",{"_index":42,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["120",{"_index":535,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["121",{"_index":536,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["122",{"_index":537,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["123",{"_index":538,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["124",{"_index":539,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["125",{"_index":540,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["126",{"_index":541,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["127",{"_index":542,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["128",{"_index":543,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["129",{"_index":544,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["13",{"_index":43,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["130",{"_index":545,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["14",{"_index":44,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["15",{"_index":45,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["1572864",{"_index":625,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["16",{"_index":46,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["17",{"_index":47,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["18",{"_index":48,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["185.199.108.153",{"_index":422,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["185.199.109.153",{"_index":424,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["185.199.110.153",{"_index":423,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["19",{"_index":49,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["1~3",{"_index":363,"title":{},"body":{"base/used.html":{},"base/used.html#示例讲解":{}}}],["1次迭代之前，呼叫所有`pend",{"_index":268,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["2",{"_index":32,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#基本介绍":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#基本介绍":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#基本介绍":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#基本介绍":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/used.html#示例讲解":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["2&amp;1",{"_index":745,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["2.6",{"_index":222,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["2.6.25",{"_index":309,"title":{},"body":{"api/stat.html":{},"api/stat.html#基本介绍":{}}}],["2.6.28",{"_index":386,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["20",{"_index":50,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/used.html#示例讲解":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["200",{"_index":431,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["2015",{"_index":403,"title":{},"body":{"base/install.html":{},"base/install.html#下载源码":{}}}],["2022",{"_index":417,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["21",{"_index":51,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["21:49:43",{"_index":419,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["21:50:03",{"_index":440,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["22",{"_index":52,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["23",{"_index":53,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["24",{"_index":54,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["25",{"_index":55,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["26",{"_index":56,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["27",{"_index":92,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["28",{"_index":93,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["29",{"_index":94,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/used.html#示例讲解":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["3",{"_index":33,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#基本介绍":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#基本介绍":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#基本介绍":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#基本介绍":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["30",{"_index":95,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["31",{"_index":96,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["31.1",{"_index":441,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["32",{"_index":97,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/stat.html":{},"api/stat.html#基本介绍":{},"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["33",{"_index":98,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["34",{"_index":99,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["35",{"_index":100,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/used.html#示例讲解":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["36",{"_index":101,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["36.8kb/",{"_index":439,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["37",{"_index":102,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["38",{"_index":103,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["39",{"_index":104,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["39;.&#39",{"_index":305,"title":{},"body":{"api/stat.html":{}}}],["39;..&#39",{"_index":306,"title":{},"body":{"api/stat.html":{}}}],["4",{"_index":34,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#基本介绍":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#基本介绍":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#基本介绍":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["4.00",{"_index":400,"title":{},"body":{"base/install.html":{},"base/install.html#版本简述":{}}}],["4.18",{"_index":226,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["4.18.tar.gz",{"_index":412,"title":{},"body":{"base/install.html":{},"base/install.html#下载源码":{}}}],["4.19",{"_index":228,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["4.19.tar.gz",{"_index":411,"title":{},"body":{"base/install.html":{},"base/install.html#下载源码":{}}}],["4.20.tar.gz",{"_index":410,"title":{},"body":{"base/install.html":{},"base/install.html#下载源码":{}}}],["4.22.tar.gz",{"_index":409,"title":{},"body":{"base/install.html":{},"base/install.html#下载源码":{}}}],["4.23.tar.gz",{"_index":408,"title":{},"body":{"base/install.html":{},"base/install.html#下载源码":{}}}],["4.24.tar.gz",{"_index":407,"title":{},"body":{"base/install.html":{},"base/install.html#下载源码":{}}}],["4.25",{"_index":398,"title":{},"body":{"base/install.html":{},"base/install.html#版本简述":{}}}],["4.25.tar.gz",{"_index":406,"title":{},"body":{"base/install.html":{},"base/install.html#下载源码":{}}}],["4.26",{"_index":396,"title":{},"body":{"base/install.html":{},"base/install.html#版本简述":{}}}],["4.27.tar.gz",{"_index":405,"title":{},"body":{"base/install.html":{},"base/install.html#下载源码":{}}}],["4.28",{"_index":397,"title":{},"body":{"base/install.html":{},"base/install.html#版本简述":{}}}],["4.29",{"_index":394,"title":{},"body":{"base/install.html":{},"base/install.html#版本简述":{}}}],["4.33",{"_index":413,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["4.33.tar.gz",{"_index":404,"title":{},"body":{"base/install.html":{},"base/install.html#下载源码":{},"base/install.html#编译安装":{}}}],["40",{"_index":105,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["4096",{"_index":169,"title":{},"body":{"api/io.html":{},"api/io.html#使用示例":{}}}],["41",{"_index":106,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["42",{"_index":107,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["43",{"_index":108,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["43~51",{"_index":364,"title":{},"body":{"base/used.html":{},"base/used.html#示例讲解":{}}}],["44",{"_index":109,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["45",{"_index":344,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["46",{"_index":345,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["47",{"_index":346,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["48",{"_index":347,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"base/used.html#示例讲解":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["49",{"_index":348,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["4:0:0",{"_index":757,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["5",{"_index":35,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#基本介绍":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#基本介绍":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["5.5",{"_index":361,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"base/used.html#示例讲解":{}}}],["50",{"_index":349,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["51",{"_index":350,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["52",{"_index":351,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["53",{"_index":471,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["54",{"_index":472,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["55",{"_index":473,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["556.18k",{"_index":438,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["556k",{"_index":435,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["56",{"_index":474,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["569527",{"_index":434,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["569527/569527",{"_index":443,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["57",{"_index":475,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["58",{"_index":476,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["59",{"_index":477,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["6",{"_index":36,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["60",{"_index":367,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["61",{"_index":478,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["62",{"_index":479,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["63",{"_index":480,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["64",{"_index":225,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"api/stat.html":{},"api/stat.html#基本介绍":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["644",{"_index":785,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["65",{"_index":481,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["66",{"_index":482,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["67",{"_index":483,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["68",{"_index":484,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["69",{"_index":485,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["7",{"_index":37,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["70",{"_index":486,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["71",{"_index":487,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["72",{"_index":488,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["73",{"_index":489,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["74",{"_index":490,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["75",{"_index":491,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["76",{"_index":492,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["77",{"_index":493,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["78",{"_index":494,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["79",{"_index":495,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["8",{"_index":38,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["80",{"_index":496,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["81",{"_index":497,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["82",{"_index":498,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["83",{"_index":499,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["84",{"_index":500,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["85",{"_index":501,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["86",{"_index":502,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["87",{"_index":503,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["88",{"_index":504,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["89",{"_index":505,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["9",{"_index":39,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["90",{"_index":506,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["91",{"_index":507,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["92",{"_index":508,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["93",{"_index":509,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["94",{"_index":510,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["95",{"_index":511,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["96",{"_index":512,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["97",{"_index":513,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["98",{"_index":514,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["99",{"_index":515,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["__kernel_rwf_t",{"_index":708,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["a.out",{"_index":573,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["abi",{"_index":308,"title":{},"body":{"api/stat.html":{},"api/stat.html#基本介绍":{}}}],["abort",{"_index":260,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["ac_config_macro_dirs([m4",{"_index":458,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["accept",{"_index":154,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["acloc",{"_index":461,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["aclocal_amflag",{"_index":463,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["activ",{"_index":377,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["ad",{"_index":457,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["add",{"_index":800,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["administr",{"_index":804,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["against",{"_index":790,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["aio",{"_index":140,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{},"api/loop.html":{},"api/loop.html#相关函数":{},"base/install.html":{},"base/install.html#版本简述":{}}}],["amp;&amp",{"_index":718,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["amp;child",{"_index":130,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{}}}],["amp;estat",{"_index":343,"title":{},"body":{"api/stat.html":{},"api/stat.html#使用示例":{}}}],["amp;idl",{"_index":74,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["amp;sigint",{"_index":303,"title":{},"body":{"api/signal.html":{},"api/signal.html#使用示例":{}}}],["amp;stdin_watch",{"_index":174,"title":{},"body":{"api/io.html":{},"api/io.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{}}}],["amp;tim",{"_index":376,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["amp;timeout_watch",{"_index":360,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{}}}],["android",{"_index":399,"title":{},"body":{"base/install.html":{},"base/install.html#版本简述":{}}}],["ansi",{"_index":657,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["api",{"_index":201,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["application/gzip",{"_index":436,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ar",{"_index":640,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["archiv",{"_index":641,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["argc",{"_index":824,"title":{},"body":{"base/install.html":{},"base/install.html#测试运行":{}}}],["argument",{"_index":624,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["argv",{"_index":825,"title":{},"body":{"base/install.html":{},"base/install.html#测试运行":{}}}],["around",{"_index":243,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["associ",{"_index":637,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["attr",{"_index":326,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["auditd",{"_index":12,"title":{},"body":{"index.html":{},"index.html#发展简介":{}}}],["autoconf",{"_index":445,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["autogen.sh",{"_index":451,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["automak",{"_index":446,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["auxiliari",{"_index":453,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["await",{"_index":429,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["b",{"_index":618,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["backend",{"_index":208,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["bad",{"_index":181,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["bin/bash",{"_index":722,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["binari",{"_index":648,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["block",{"_index":134,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{}}}],["break",{"_index":233,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["bs=4096",{"_index":650,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["bsd",{"_index":230,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["buffer",{"_index":168,"title":{},"body":{"api/io.html":{},"api/io.html#使用示例":{}}}],["bug",{"_index":192,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["build",{"_index":550,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["bye",{"_index":299,"title":{},"body":{"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{}}}],["c",{"_index":0,"title":{"index.html":{}},"body":{"api/io.html":{},"api/io.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["c89",{"_index":584,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["cach",{"_index":677,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["callback",{"_index":24,"title":{},"body":{"api/idle.html":{},"api/idle.html#相关函数":{},"api/child.html":{},"api/child.html#相关函数":{},"api/io.html":{},"api/io.html#相关函数":{},"api/signal.html":{},"api/signal.html#相关函数":{},"api/stat.html":{},"api/stat.html#相关函数":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{}}}],["cc",{"_index":827,"title":{},"body":{"base/install.html":{},"base/install.html#测试运行":{}}}],["cd",{"_index":766,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["chair",{"_index":251,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["char",{"_index":167,"title":{},"body":{"api/io.html":{},"api/io.html#使用示例":{},"api/stat.html":{},"api/stat.html#相关函数":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["characterist",{"_index":684,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["check",{"_index":546,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["child",{"_index":123,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{}}}],["child_cb",{"_index":113,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{}}}],["chmod",{"_index":784,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["clock",{"_index":382,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["clock_gettim",{"_index":706,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["clock_monoton",{"_index":388,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["clone",{"_index":231,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["close",{"_index":142,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{}}}],["command",{"_index":623,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["compat",{"_index":547,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["compil",{"_index":467,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["config.h",{"_index":716,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["config.statu",{"_index":715,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["configur",{"_index":444,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["configure.ac",{"_index":459,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["configure.ac:12",{"_index":465,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["configure.ac:7",{"_index":468,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["connect",{"_index":425,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["consid",{"_index":456,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["const",{"_index":318,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["constant",{"_index":370,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["contain",{"_index":709,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["convert",{"_index":626,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["count=1",{"_index":651,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["cpu",{"_index":156,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{}}}],["creat",{"_index":122,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["cross",{"_index":576,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["cru",{"_index":771,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ctrl",{"_index":165,"title":{},"body":{"api/io.html":{},"api/io.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{}}}],["ctrl`+`c",{"_index":112,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{}}}],["d",{"_index":117,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["d\\n",{"_index":120,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{}}}],["data",{"_index":257,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["dd",{"_index":646,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["declar",{"_index":738,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["default",{"_index":570,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["definit",{"_index":741,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["deliantra",{"_index":13,"title":{},"body":{"index.html":{},"index.html#发展简介":{}}}],["demo",{"_index":821,"title":{},"body":{"base/install.html":{},"base/install.html#测试运行":{}}}],["depcomp",{"_index":470,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["depend",{"_index":591,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["depfil",{"_index":717,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["deps/ev.plo",{"_index":747,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["deps/ev.tpo",{"_index":731,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["deps/event.plo",{"_index":753,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["deps/event.tpo",{"_index":749,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["despit",{"_index":742,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["detect",{"_index":378,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["dev/nul",{"_index":744,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["dhave_config_h",{"_index":725,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["direct",{"_index":589,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["directori",{"_index":720,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["dlfcn.h",{"_index":666,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["dlltool",{"_index":636,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["document",{"_index":807,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["domain",{"_index":152,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{}}}],["done",{"_index":714,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["dpic",{"_index":675,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["dup2",{"_index":141,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{}}}],["dure",{"_index":797,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["dynam",{"_index":683,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["e",{"_index":606,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["egrep",{"_index":608,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["elf_x86_64",{"_index":679,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["emanuel",{"_index":6,"title":{},"body":{"index.html":{},"index.html#发展简介":{}}}],["enabl",{"_index":564,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["enfil",{"_index":155,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{}}}],["enter",{"_index":365,"title":{},"body":{"base/used.html":{},"base/used.html#示例讲解":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["environ",{"_index":183,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["epol",{"_index":137,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{},"api/loop.html":{},"api/loop.html#相关函数":{}}}],["epoll(7",{"_index":221,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["epoll_ctl",{"_index":704,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["estat",{"_index":340,"title":{},"body":{"api/stat.html":{},"api/stat.html#使用示例":{}}}],["etc/ld.so.conf",{"_index":805,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ev++.h",{"_index":816,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ev.3",{"_index":819,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ev.c",{"_index":732,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ev.c:2143:31",{"_index":734,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ev.h",{"_index":58,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["ev.lo",{"_index":727,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ev.o",{"_index":743,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ev_a",{"_index":375,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["ev_a_",{"_index":356,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["ev_api_decl",{"_index":740,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ev_async",{"_index":281,"title":{},"body":{"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["ev_backend",{"_index":264,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["ev_break",{"_index":261,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"base/used.html":{},"base/used.html#使用示例":{},"base/used.html#示例讲解":{}}}],["ev_break(loop",{"_index":67,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{}}}],["ev_break`或`flags`为`evrun_once`、`evrun_nowait",{"_index":278,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["ev_check",{"_index":276,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["ev_child",{"_index":78,"title":{"api/child.html":{}},"body":{"api/child.html":{},"api/child.html#基本介绍":{},"api/child.html#相关函数":{},"api/child.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{}}}],["ev_child_init",{"_index":82,"title":{},"body":{"api/child.html":{},"api/child.html#相关函数":{}}}],["ev_child_init(&amp;child",{"_index":128,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{}}}],["ev_child_set",{"_index":85,"title":{},"body":{"api/child.html":{},"api/child.html#相关函数":{}}}],["ev_child_start(loop",{"_index":129,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{}}}],["ev_child_stop",{"_index":81,"title":{},"body":{"api/child.html":{},"api/child.html#基本介绍":{}}}],["ev_default",{"_index":70,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["ev_default_loop",{"_index":176,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["ev_default_loop_ptr",{"_index":736,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ev_feed_sign",{"_index":295,"title":{},"body":{"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["ev_idl",{"_index":19,"title":{"api/idle.html":{}},"body":{"api/idle.html":{},"api/idle.html#基本介绍":{},"api/idle.html#相关函数":{},"api/idle.html#使用示例":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["ev_idle_init",{"_index":23,"title":{},"body":{"api/idle.html":{},"api/idle.html#相关函数":{}}}],["ev_idle_init(&amp;idl",{"_index":72,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["ev_idle_start",{"_index":25,"title":{},"body":{"api/idle.html":{},"api/idle.html#相关函数":{}}}],["ev_idle_start(loop",{"_index":73,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["ev_idle_stop(loop",{"_index":823,"title":{},"body":{"base/install.html":{},"base/install.html#测试运行":{}}}],["ev_init",{"_index":372,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["ev_io",{"_index":131,"title":{"api/io.html":{}},"body":{"api/io.html":{},"api/io.html#基本介绍":{},"api/io.html#相关函数":{},"api/io.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/used.html#示例讲解":{}}}],["ev_io_init",{"_index":158,"title":{},"body":{"api/io.html":{},"api/io.html#相关函数":{},"api/io.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{}}}],["ev_io_modifi",{"_index":163,"title":{},"body":{"api/io.html":{},"api/io.html#相关函数":{}}}],["ev_io_set",{"_index":160,"title":{},"body":{"api/io.html":{},"api/io.html#相关函数":{}}}],["ev_io_start",{"_index":164,"title":{},"body":{"api/io.html":{},"api/io.html#相关函数":{},"api/io.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{}}}],["ev_io_stop",{"_index":355,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{}}}],["ev_is_default_loop",{"_index":252,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["ev_iter",{"_index":255,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["ev_loop",{"_index":27,"title":{"api/loop.html":{}},"body":{"api/idle.html":{},"api/idle.html#相关函数":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#相关函数":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#基本介绍":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#基本介绍":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/used.html#示例讲解":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["ev_loop_new",{"_index":189,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["ev_now",{"_index":272,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["ev_now_upd",{"_index":390,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["ev_p_",{"_index":353,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{}}}],["ev_period",{"_index":275,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["ev_read",{"_index":161,"title":{},"body":{"api/io.html":{},"api/io.html#相关函数":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"base/used.html":{},"base/used.html#使用示例":{}}}],["ev_recommended_backend",{"_index":245,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["ev_run",{"_index":75,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/used.html#示例讲解":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["ev_run(loop",{"_index":826,"title":{},"body":{"base/install.html":{},"base/install.html#测试运行":{}}}],["ev_set_idl",{"_index":28,"title":{},"body":{"api/idle.html":{},"api/idle.html#相关函数":{}}}],["ev_set_userdata",{"_index":256,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["ev_sign",{"_index":202,"title":{"api/signal.html":{}},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#基本介绍":{},"api/signal.html#相关函数":{},"api/signal.html#使用示例":{}}}],["ev_signal_init",{"_index":296,"title":{},"body":{"api/signal.html":{},"api/signal.html#相关函数":{}}}],["ev_signal_init(&amp;sigint",{"_index":301,"title":{},"body":{"api/signal.html":{},"api/signal.html#使用示例":{}}}],["ev_signal_set",{"_index":298,"title":{},"body":{"api/signal.html":{},"api/signal.html#相关函数":{}}}],["ev_signal_start(loop",{"_index":302,"title":{},"body":{"api/signal.html":{},"api/signal.html#使用示例":{}}}],["ev_stat",{"_index":196,"title":{"api/stat.html":{}},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"api/stat.html":{},"api/stat.html#基本介绍":{},"api/stat.html#相关函数":{},"api/stat.html#使用示例":{}}}],["ev_stat_init",{"_index":317,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["ev_stat_init(&amp;estat",{"_index":341,"title":{},"body":{"api/stat.html":{},"api/stat.html#使用示例":{}}}],["ev_stat_set",{"_index":322,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["ev_stat_start(loop",{"_index":342,"title":{},"body":{"api/stat.html":{},"api/stat.html#使用示例":{}}}],["ev_stat_stat",{"_index":323,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["ev_statdata",{"_index":324,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["ev_tim",{"_index":274,"title":{"api/timer.html":{}},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"base/used.html":{},"base/used.html#使用示例":{},"base/used.html#示例讲解":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{}}}],["ev_timer_again",{"_index":371,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{}}}],["ev_timer_init",{"_index":359,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{}}}],["ev_timer_remain",{"_index":391,"title":{},"body":{"api/timer.html":{},"api/timer.html#相关函数":{}}}],["ev_timer_set",{"_index":369,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{}}}],["ev_timer_set(w",{"_index":392,"title":{},"body":{"api/timer.html":{},"api/timer.html#相关函数":{}}}],["ev_timer_start",{"_index":362,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{}}}],["ev_timer_stop",{"_index":368,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["ev_tstamp",{"_index":320,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{},"api/timer.html":{},"api/timer.html#相关函数":{}}}],["ev_userdata",{"_index":258,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["ev_verifi",{"_index":259,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["ev_writ",{"_index":162,"title":{},"body":{"api/io.html":{},"api/io.html#相关函数":{},"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evbackend_devpol",{"_index":238,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evbackend_epol",{"_index":220,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evbackend_kqueu",{"_index":229,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evbackend_linuxaio",{"_index":224,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evbackend_pol",{"_index":186,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evbackend_port",{"_index":240,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evbackend_select",{"_index":187,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evbreak_al",{"_index":68,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{}}}],["evbreak_on",{"_index":262,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"base/used.html":{},"base/used.html#使用示例":{}}}],["event",{"_index":159,"title":{},"body":{"api/io.html":{},"api/io.html#相关函数":{},"api/loop.html":{},"api/loop.html#相关函数":{}}}],["event.c",{"_index":750,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["event.h",{"_index":817,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["event.lo",{"_index":748,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["event.o",{"_index":752,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["eventfd",{"_index":401,"title":{},"body":{"base/install.html":{},"base/install.html#版本简述":{},"base/install.html#编译安装":{}}}],["evfilt_read",{"_index":235,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evfilt_writ",{"_index":237,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evflag_auto",{"_index":191,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evflag_forkcheck",{"_index":193,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evflag_noenv",{"_index":188,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evflag_noinotifi",{"_index":195,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evflag_nosigmask",{"_index":203,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["evflag_notimerfd",{"_index":204,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evflag_signalfd",{"_index":199,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evrun_nowait",{"_index":267,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evrun_nowait`或者没有活跃的观察者则不会导致`sleep",{"_index":273,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["evrun_onc",{"_index":265,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["except",{"_index":671,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["exec",{"_index":291,"title":{},"body":{"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["execut",{"_index":575,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["execv",{"_index":289,"title":{},"body":{"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["exit",{"_index":124,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{}}}],["exit_failur",{"_index":125,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{}}}],["exit_success",{"_index":127,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{}}}],["explicitli",{"_index":682,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ext2/3",{"_index":310,"title":{},"body":{"api/stat.html":{},"api/stat.html#基本介绍":{}}}],["extern",{"_index":739,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["f",{"_index":610,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["fail",{"_index":121,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{}}}],["fals",{"_index":254,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["fatal",{"_index":179,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["fd",{"_index":144,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{},"api/io.html#相关函数":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{}}}],["fd_set",{"_index":210,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["fgrep",{"_index":609,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["file",{"_index":143,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["file.o",{"_index":676,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["finish",{"_index":279,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["flag",{"_index":178,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["floor",{"_index":710,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["fno",{"_index":669,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["follow",{"_index":799,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["fork",{"_index":17,"title":{},"body":{"index.html":{},"index.html#发展简介":{},"index.html#特性展示":{},"api/child.html":{},"api/child.html#基本介绍":{},"api/child.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{}}}],["fork/execve/pthread_cr",{"_index":286,"title":{},"body":{"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["format",{"_index":627,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["found",{"_index":246,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["fpic",{"_index":674,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["full",{"_index":794,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["func_convert_file_noop",{"_index":628,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["g",{"_index":581,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["gawk",{"_index":558,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["gcc",{"_index":569,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["gcc/clang",{"_index":449,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["gcc3",{"_index":592,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["gener",{"_index":712,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["getpid",{"_index":194,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["gettimeofday",{"_index":384,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["giaquinta",{"_index":7,"title":{},"body":{"index.html":{},"index.html#发展简介":{}}}],["given",{"_index":791,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["gnu",{"_index":580,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["gnu/linux",{"_index":385,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["gplv2",{"_index":8,"title":{},"body":{"index.html":{},"index.html#发展简介":{}}}],["grep",{"_index":603,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["gvpe",{"_index":9,"title":{},"body":{"index.html":{},"index.html#发展简介":{}}}],["handl",{"_index":198,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["happen",{"_index":788,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["hardcod",{"_index":686,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["header",{"_index":658,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["hello",{"_index":29,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{}}}],["here",{"_index":247,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["hide",{"_index":249,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["host",{"_index":597,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["http",{"_index":366,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["https://libev.cn/downloads/libev",{"_index":416,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["i/o",{"_index":16,"title":{},"body":{"index.html":{},"index.html#发展简介":{},"index.html#特性展示":{},"api/io.html":{},"api/io.html#基本介绍":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/stat.html":{},"api/stat.html#基本介绍":{},"base/used.html":{},"base/used.html#使用示例":{}}}],["i/o、cpu",{"_index":307,"title":{},"body":{"api/stat.html":{},"api/stat.html#基本介绍":{}}}],["i/usr/local/includ",{"_index":830,"title":{},"body":{"base/install.html":{},"base/install.html#测试运行":{}}}],["id",{"_index":86,"title":{},"body":{"api/child.html":{},"api/child.html#相关函数":{},"api/child.html#使用示例":{}}}],["idioci",{"_index":244,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["idl",{"_index":71,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["idle_cb",{"_index":62,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["if",{"_index":311,"title":{},"body":{"api/stat.html":{},"api/stat.html#基本介绍":{}}}],["ignor",{"_index":775,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["immedi",{"_index":688,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["includ",{"_index":57,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["info",{"_index":756,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["inform",{"_index":809,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["initi",{"_index":737,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["initialis",{"_index":180,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["inotifi",{"_index":197,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"api/stat.html":{},"api/stat.html#基本介绍":{}}}],["inotify_init",{"_index":703,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["instal",{"_index":466,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["int",{"_index":64,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#相关函数":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#相关函数":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#相关函数":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["interfac",{"_index":619,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["interv",{"_index":321,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["inttypes.h",{"_index":664,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["io_submit",{"_index":227,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["io_ur",{"_index":395,"title":{},"body":{"base/install.html":{},"base/install.html#版本简述":{}}}],["iso",{"_index":583,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["kb/",{"_index":442,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["kevent",{"_index":236,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["kqueue",{"_index":138,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/stat.html":{},"api/stat.html#基本介绍":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["l/usr/local/lib",{"_index":829,"title":{},"body":{"base/install.html":{},"base/install.html#测试运行":{}}}],["last_act",{"_index":374,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["lc",{"_index":681,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ld",{"_index":611,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ld(1",{"_index":811,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ld.so",{"_index":685,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ld.so(8",{"_index":812,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ld_library_path",{"_index":801,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ld_run_path",{"_index":802,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ldconfig",{"_index":787,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["leav",{"_index":777,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["lehmann",{"_index":5,"title":{},"body":{"index.html":{},"index.html#发展简介":{}}}],["length",{"_index":433,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["lev",{"_index":831,"title":{},"body":{"base/install.html":{},"base/install.html#测试运行":{}}}],["level",{"_index":132,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{}}}],["lib",{"_index":668,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["lib/libev.a",{"_index":783,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["lib/libev.la",{"_index":782,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["lib/libev.so.4.0.0",{"_index":780,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["libdir",{"_index":792,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["libev",{"_index":2,"title":{"index.html":{}},"body":{"index.html":{},"index.html#发展简介":{},"index.html#特性展示":{},"api/child.html":{},"api/child.html#基本介绍":{},"api/io.html":{},"api/io.html#基本介绍":{},"api/io.html#相关函数":{},"api/loop.html":{},"api/loop.html#基本介绍":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#基本介绍":{},"api/stat.html":{},"api/stat.html#基本介绍":{},"api/stat.html#相关函数":{},"base/used.html":{},"base/used.html#示例讲解":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"base/install.html":{},"base/install.html#命名规则":{},"base/install.html#下载源码":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["libev.cn",{"_index":421,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["libev.cn)|185.199.108.153|:443",{"_index":426,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["libev.la",{"_index":758,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["libev.so",{"_index":770,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["libev.so.4",{"_index":768,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["libev.so.4.0.0",{"_index":769,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["libev_flag",{"_index":182,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["librari",{"_index":634,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["libs/ev.o",{"_index":733,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["libs/event.o",{"_index":751,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["libs/libev.a",{"_index":772,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["libs/libev.lai",{"_index":781,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["libs/libev.so.4.0.0",{"_index":765,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["libtool",{"_index":447,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["libuv",{"_index":3,"title":{"index.html":{}},"body":{"index.html":{},"index.html#发展简介":{},"index.html#特性展示":{}}}],["line",{"_index":605,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["link",{"_index":454,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["linker",{"_index":613,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["linux",{"_index":139,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/stat.html":{},"api/stat.html#基本介绍":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"base/install.html":{},"base/install.html#版本简述":{},"base/install.html#编译安装":{}}}],["linux/aio_abi.h",{"_index":701,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["linux/fs.h",{"_index":702,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["lister",{"_index":615,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["llibdir",{"_index":796,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["lm",{"_index":711,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ln",{"_index":620,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["local",{"_index":761,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["long",{"_index":604,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["loop",{"_index":18,"title":{},"body":{"index.html":{},"index.html#发展简介":{},"index.html#特性展示":{},"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#相关函数":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["loop_1",{"_index":282,"title":{},"body":{"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["loop_2",{"_index":284,"title":{},"body":{"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["ltmain.sh",{"_index":455,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["m",{"_index":678,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["m4",{"_index":462,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["main",{"_index":69,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["main.c",{"_index":828,"title":{},"body":{"base/install.html":{},"base/install.html#测试运行":{}}}],["maintain",{"_index":565,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["make",{"_index":448,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["make[1",{"_index":719,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["makefil",{"_index":568,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["makefile.am",{"_index":464,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["manifest",{"_index":653,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["manual",{"_index":813,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["marc",{"_index":4,"title":{},"body":{"index.html":{},"index.html#发展简介":{}}}],["mawk",{"_index":559,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["maximum",{"_index":622,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["mayb",{"_index":248,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["md",{"_index":728,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["memory.h",{"_index":662,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["memset",{"_index":170,"title":{},"body":{"api/io.html":{},"api/io.html#使用示例":{}}}],["mf",{"_index":730,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["miss",{"_index":469,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["mkdir",{"_index":555,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["mode=compil",{"_index":724,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["mode=instal",{"_index":779,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["mode=link",{"_index":754,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["modifi",{"_index":774,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["monoton",{"_index":383,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["more",{"_index":808,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["morpg",{"_index":14,"title":{},"body":{"index.html":{},"index.html#发展简介":{}}}],["mp",{"_index":729,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ms",{"_index":614,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["mt",{"_index":652,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["mv",{"_index":746,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["n",{"_index":172,"title":{},"body":{"api/io.html":{},"api/io.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["name",{"_index":572,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["nanosleep",{"_index":707,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["need",{"_index":586,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["nest",{"_index":562,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["netbsd",{"_index":232,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["new_valu",{"_index":379,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["newer",{"_index":713,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["nf",{"_index":314,"title":{},"body":{"api/stat.html":{},"api/stat.html#基本介绍":{}}}],["nm",{"_index":616,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["node.j",{"_index":15,"title":{},"body":{"index.html":{},"index.html#发展简介":{}}}],["non",{"_index":136,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{}}}],["none",{"_index":585,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["note_eof",{"_index":234,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["null",{"_index":190,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["o",{"_index":578,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["o(1",{"_index":380,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["o(active_fd",{"_index":223,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["o(highest_fd",{"_index":211,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["o(total_fd",{"_index":215,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["o3",{"_index":726,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["objdir",{"_index":667,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["objdump",{"_index":632,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["object",{"_index":577,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ok",{"_index":432,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["on",{"_index":798,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["open",{"_index":145,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{}}}],["oper",{"_index":806,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["option",{"_index":582,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ot",{"_index":115,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{}}}],["output",{"_index":571,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["p",{"_index":556,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["page",{"_index":814,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["pars",{"_index":644,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["pass_al",{"_index":635,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["path",{"_index":319,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["pathnam",{"_index":795,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["pc",{"_index":596,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["pend",{"_index":266,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"api/timer.html":{},"api/timer.html#相关函数":{}}}],["pic",{"_index":673,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["pid",{"_index":83,"title":{},"body":{"api/child.html":{},"api/child.html#相关函数":{}}}],["pipe",{"_index":649,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["pipe/sockpair",{"_index":150,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{}}}],["poll",{"_index":185,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["poll(2",{"_index":214,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["poll.h",{"_index":696,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["pollerr",{"_index":217,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["pollhup",{"_index":218,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["pollin",{"_index":216,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["pollout",{"_index":219,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["port.h",{"_index":695,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["port_creat",{"_index":705,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["portabl",{"_index":207,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["portion",{"_index":567,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["posix",{"_index":146,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{},"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["possibl",{"_index":689,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["prepar",{"_index":270,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["preprocessor",{"_index":656,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["presenc",{"_index":692,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["prev",{"_index":325,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["print",{"_index":598,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["printf",{"_index":114,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["process",{"_index":118,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{}}}],["processid",{"_index":116,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{}}}],["produc",{"_index":672,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["program",{"_index":687,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["pthread_atfork",{"_index":292,"title":{},"body":{"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["put",{"_index":66,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["r",{"_index":631,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["ranlib",{"_index":643,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["read",{"_index":91,"title":{},"body":{"api/child.html":{},"api/child.html#相关函数":{},"api/signal.html":{},"api/signal.html#相关函数":{},"api/stat.html":{},"api/stat.html#相关函数":{},"api/timer.html":{},"api/timer.html#相关函数":{}}}],["read(w",{"_index":171,"title":{},"body":{"api/io.html":{},"api/io.html#使用示例":{}}}],["readfd",{"_index":212,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["readi",{"_index":354,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"base/used.html#示例讲解":{}}}],["real",{"_index":389,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["recogn",{"_index":633,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["reisef",{"_index":312,"title":{},"body":{"api/stat.html":{},"api/stat.html#基本介绍":{}}}],["reload",{"_index":630,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["repeat",{"_index":373,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{}}}],["request",{"_index":427,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["rerun",{"_index":460,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["resolv",{"_index":420,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["respons",{"_index":430,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["return",{"_index":77,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["revent",{"_index":65,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["rm",{"_index":767,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["root/build/libev",{"_index":721,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["root@izbp18k2vy63cz9njzffe8z:~/build",{"_index":414,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["root@izbp18k2vy63cz9njzffe8z:~/build/libev",{"_index":452,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["rpath",{"_index":759,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["rpath,/usr/local/lib",{"_index":832,"title":{},"body":{"base/install.html":{},"base/install.html#测试运行":{}}}],["rpid",{"_index":90,"title":{},"body":{"api/child.html":{},"api/child.html#相关函数":{},"api/child.html#使用示例":{}}}],["rstatu",{"_index":87,"title":{},"body":{"api/child.html":{},"api/child.html#相关函数":{},"api/child.html#使用示例":{}}}],["rtti",{"_index":670,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["run",{"_index":655,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["runtim",{"_index":638,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["rxvt",{"_index":10,"title":{},"body":{"index.html":{},"index.html#发展简介":{}}}],["s",{"_index":621,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["s\\n",{"_index":639,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["safe",{"_index":554,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["sane",{"_index":551,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["save",{"_index":437,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["sed",{"_index":600,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["see",{"_index":776,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["select",{"_index":184,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["select(2",{"_index":209,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["sent",{"_index":428,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["set",{"_index":560,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["sh",{"_index":450,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["share",{"_index":680,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["sig_cb",{"_index":300,"title":{},"body":{"api/signal.html":{},"api/signal.html#使用示例":{}}}],["sig_dfl",{"_index":290,"title":{},"body":{"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["sig_ign",{"_index":288,"title":{},"body":{"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["sigact",{"_index":280,"title":{},"body":{"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["sigalrm",{"_index":135,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{}}}],["sigchild",{"_index":80,"title":{},"body":{"api/child.html":{},"api/child.html#基本介绍":{},"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["sigchld",{"_index":79,"title":{},"body":{"api/child.html":{},"api/child.html#基本介绍":{}}}],["sigfd",{"_index":293,"title":{},"body":{"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["sigint",{"_index":283,"title":{},"body":{"api/signal.html":{},"api/signal.html#基本介绍":{},"api/signal.html#使用示例":{}}}],["sigio",{"_index":285,"title":{},"body":{"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["signal",{"_index":22,"title":{},"body":{"api/idle.html":{},"api/idle.html#基本介绍":{},"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["signal`、`async`、`child",{"_index":277,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["signalfd",{"_index":200,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"api/signal.html":{},"api/signal.html#基本介绍":{},"base/install.html":{},"base/install.html#版本简述":{},"base/install.html#编译安装":{}}}],["signum",{"_index":297,"title":{},"body":{"api/signal.html":{},"api/signal.html#相关函数":{}}}],["sigpip",{"_index":153,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{}}}],["sigprocmask",{"_index":287,"title":{},"body":{"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["sigwait",{"_index":294,"title":{},"body":{"api/signal.html":{},"api/signal.html#基本介绍":{}}}],["sleep",{"_index":126,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{}}}],["socket",{"_index":20,"title":{},"body":{"api/idle.html":{},"api/idle.html#基本介绍":{},"api/io.html":{},"api/io.html#基本介绍":{}}}],["solari",{"_index":239,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["sonam",{"_index":763,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["specif",{"_index":566,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["specifi",{"_index":793,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["st_atim",{"_index":335,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["st_ctime",{"_index":337,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["st_dev",{"_index":327,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["st_gid",{"_index":332,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["st_ino",{"_index":328,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["st_mode",{"_index":329,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["st_mtime",{"_index":336,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["st_nlink",{"_index":330,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["st_rdev",{"_index":333,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["st_size",{"_index":334,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["st_uid",{"_index":331,"title":{},"body":{"api/stat.html":{},"api/stat.html#相关函数":{}}}],["start",{"_index":822,"title":{},"body":{"base/install.html":{},"base/install.html#测试运行":{}}}],["stat",{"_index":304,"title":{},"body":{"api/stat.html":{},"api/stat.html#基本介绍":{},"api/stat.html#相关函数":{}}}],["stat_cb",{"_index":339,"title":{},"body":{"api/stat.html":{},"api/stat.html#使用示例":{}}}],["state",{"_index":263,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["static",{"_index":60,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["statu",{"_index":119,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{}}}],["stdin",{"_index":147,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{},"api/io.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"base/used.html#示例讲解":{}}}],["stdin_cb",{"_index":166,"title":{},"body":{"api/io.html":{},"api/io.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{}}}],["stdin_fileno",{"_index":175,"title":{},"body":{"api/io.html":{},"api/io.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{}}}],["stdin_watch",{"_index":173,"title":{},"body":{"api/io.html":{},"api/io.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{}}}],["stdint.h",{"_index":665,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["stdio.h",{"_index":59,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["stdlib.h",{"_index":110,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["stdout",{"_index":148,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{}}}],["string",{"_index":599,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["string.h",{"_index":661,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["strings.h",{"_index":663,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["strip",{"_index":642,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["struct",{"_index":26,"title":{},"body":{"api/idle.html":{},"api/idle.html#相关函数":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#相关函数":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#基本介绍":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#相关函数":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["style",{"_index":590,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["such",{"_index":810,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["suffix",{"_index":574,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["sun",{"_index":241,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["support",{"_index":561,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["suspend",{"_index":387,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["sys/epoll.h",{"_index":693,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["sys/event.h",{"_index":694,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["sys/eventfd.h",{"_index":699,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["sys/inotify.h",{"_index":690,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["sys/select.h",{"_index":698,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["sys/signalfd.h",{"_index":700,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["sys/stat.h",{"_index":660,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["sys/timerfd.h",{"_index":697,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["sys/types.h",{"_index":659,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["sys/wait.h",{"_index":88,"title":{},"body":{"api/child.html":{},"api/child.html#相关函数":{}}}],["sysroot",{"_index":645,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["system",{"_index":593,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["tag=cc",{"_index":723,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["thread",{"_index":553,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["time",{"_index":271,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["timeout",{"_index":358,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"base/used.html#示例讲解":{},"api/timer.html":{},"api/timer.html#基本介绍":{},"api/timer.html#相关函数":{}}}],["timeout_cb",{"_index":357,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{}}}],["timeout_watch",{"_index":352,"title":{},"body":{"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{}}}],["timer",{"_index":21,"title":{},"body":{"api/idle.html":{},"api/idle.html#基本介绍":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["timerfd",{"_index":205,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"base/install.html":{},"base/install.html#版本简述":{}}}],["togeth",{"_index":588,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["tool",{"_index":654,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["toolchain",{"_index":629,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["trace",{"_index":84,"title":{},"body":{"api/child.html":{},"api/child.html#相关函数":{}}}],["trigger",{"_index":133,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{}}}],["true",{"_index":253,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["truncat",{"_index":601,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["tti",{"_index":149,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{}}}],["type",{"_index":594,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["u",{"_index":773,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["under",{"_index":250,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["understand",{"_index":587,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["unicod",{"_index":11,"title":{},"body":{"index.html":{},"index.html#发展简介":{}}}],["unistd.h",{"_index":111,"title":{},"body":{"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["unix",{"_index":151,"title":{},"body":{"api/io.html":{},"api/io.html#基本介绍":{}}}],["unsign",{"_index":177,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["us",{"_index":579,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["usabl",{"_index":691,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["usr",{"_index":760,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["usr/bin/dd",{"_index":647,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["usr/bin/grep",{"_index":607,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["usr/bin/instal",{"_index":548,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["usr/bin/ld",{"_index":612,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["usr/bin/mkdir",{"_index":557,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["usr/bin/nm",{"_index":617,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["usr/bin/s",{"_index":602,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["usr/loc",{"_index":820,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["usr/local/includ",{"_index":815,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["usr/local/lib",{"_index":778,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/sbin",{"_index":786,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["usr/local/share/man/man3",{"_index":818,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["v.log",{"_index":338,"title":{},"body":{"api/stat.html":{},"api/stat.html#使用示例":{}}}],["valu",{"_index":206,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["variabl",{"_index":563,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["version",{"_index":755,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["version}.tar.gz",{"_index":402,"title":{},"body":{"base/install.html":{},"base/install.html#命名规则":{}}}],["void",{"_index":61,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/loop.html":{},"api/loop.html#相关函数":{},"api/loop.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{},"base/install.html":{},"base/install.html#测试运行":{}}}],["w",{"_index":63,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{},"api/child.html":{},"api/child.html#使用示例":{},"api/io.html":{},"api/io.html#使用示例":{},"api/signal.html":{},"api/signal.html#使用示例":{},"api/stat.html":{},"api/stat.html#使用示例":{},"base/used.html":{},"base/used.html#使用示例":{},"api/timer.html":{},"api/timer.html#相关函数":{}}}],["waitpid",{"_index":89,"title":{},"body":{"api/child.html":{},"api/child.html#相关函数":{}}}],["wall",{"_index":381,"title":{},"body":{"api/timer.html":{},"api/timer.html#基本介绍":{}}}],["want",{"_index":789,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["warn",{"_index":735,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["watcher",{"_index":269,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["wget",{"_index":415,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["whether",{"_index":549,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["wl",{"_index":762,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{},"base/install.html#测试运行":{}}}],["wl,libdir",{"_index":803,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["wl,libev.so.4",{"_index":764,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["work",{"_index":242,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{},"base/install.html":{},"base/install.html#编译安装":{}}}],["world",{"_index":30,"title":{},"body":{"api/idle.html":{},"api/idle.html#使用示例":{}}}],["write",{"_index":393,"title":{},"body":{"api/timer.html":{},"api/timer.html#相关函数":{}}}],["writefd",{"_index":213,"title":{},"body":{"api/loop.html":{},"api/loop.html#相关函数":{}}}],["x86_64",{"_index":595,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}],["xf",{"_index":313,"title":{},"body":{"api/stat.html":{},"api/stat.html#基本介绍":{}}}],["ye",{"_index":552,"title":{},"body":{"base/install.html":{},"base/install.html#编译安装":{}}}]],"pipeline":["stemmer"]},"store":{"index.html":{"title":"用C语言编写的高性能事件驱动库 | Libevent | Libuv | 高并发、高性能","path":"/index.html","body":"发展简介 Libev 是一个全功能和高性能的事件循环库, 由 Marc Lehmann 和 Emanuele Giaquinta 创建. 它以 GPLv2 协议进行发布, 并且在目前为止的多个行业内广泛被应用在各类生成环境中. GVPE 虚拟专用以太网、 rxvt-unicode 、 auditd 、 Deliantra MORPG 服务器和客户端以及许多其他程序. 甚至鼎鼎大名的 node.js 也曾经在早期的版本内嵌入并使用 Libev , 后来才使用自行编写的 Libuv . 特性展示 特性 Libevent Libev Libuv I/O监控 √ √ √ 相对计时器 √ √ √ 绝对定时器 × √ × fork检查 × √ × loop清理 × √ × 文件监控 × √ √ 进程管理 × √ √ 线程通知 × √ √ 空闲事件 × √ √ 信号管理 √ √ √ 译者 如有错误, 请联系 水果糖的小铺子 修改."},"index.html#发展简介":{"title":"发展简介","path":"/index.html#发展简介","body":"Libev 是一个全功能和高性能的事件循环库, 由 Marc Lehmann 和 Emanuele Giaquinta 创建. 它以 GPLv2 协议进行发布, 并且在目前为止的多个行业内广泛被应用在各类生成环境中. GVPE 虚拟专用以太网、 rxvt-unicode 、 auditd 、 Deliantra MORPG 服务器和客户端以及许多其他程序. 甚至鼎鼎大名的 node.js 也曾经在早期的版本内嵌入并使用 Libev , 后来才使用自行编写的 Libuv . 特性展示 特性 Libevent Libev Libuv I/O监控 √ √ √ 相对计时器 √ √ √ 绝对定时器 × √ × fork检查 × √ × loop清理 × √ × 文件监控 × √ √ 进程管理 × √ √ 线程通知 × √ √ 空闲事件 × √ √ 信号管理 √ √ √ 译者 如有错误, 请联系 水果糖的小铺子 修改."},"index.html#特性展示":{"title":"特性展示","path":"/index.html#特性展示","body":"特性 Libevent Libev Libuv I/O监控 √ √ √ 相对计时器 √ √ √ 绝对定时器 × √ × fork检查 × √ × loop清理 × √ × 文件监控 × √ √ 进程管理 × √ √ 线程通知 × √ √ 空闲事件 × √ √ 信号管理 √ √ √ 译者 如有错误, 请联系 水果糖的小铺子 修改."},"index.html#译者":{"title":"译者","path":"/index.html#译者","body":"如有错误, 请联系 水果糖的小铺子 修改."},"api/idle.html":{"title":"ev_idle 的使用方式","path":"/api/idle.html","body":"基本介绍 ev_idle 在没有更高优先级的事件后触发. 当没有别的事情做了… 只要您的进程忙于处理具有相同或更高优先级的 socket 、 Timer 、 signal ， ev_idle 在此期间就不会被触发. 而一旦您的进程长期处于 空闲状态 , ev_idle 则会在每次事件迭代中被调用一次直到被主动停止. 或者, 您的进程在此期间被更高优先级的事件所占用. ev_idle 还有一个应用场景就是可以做为 伪后台程序 的方式运行, 比如在事件处理完毕之后做一些需要延迟善后的工作. 相关函数 ev_idle_init (ev_idle *, callback) ev_idle_start (struct ev_loop , ev_idle ) 初始化、激活 ev_idle , 他没有任何其他有意义的参数. ev_set_idle 也没有什么意义. 使用示例 启动 ev_idle 并且输出” Hello world “后退出: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // 只需导入单个头文件 # include ev.h # include stdio.h // 输出后退出. static void idle_cb (struct ev_loop *loop, ev_idle *w, int revents)  puts ( \"Hello world.\" ); ev_break(loop, EVBREAK_ALL);  int main ( void )  // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; ev_idle idle; ev_idle_init(&amp;idle, idle_cb); ev_idle_start(loop, &amp;idle); // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ; "},"api/idle.html#基本介绍":{"title":"基本介绍","path":"/api/idle.html#基本介绍","body":"ev_idle 在没有更高优先级的事件后触发. 当没有别的事情做了… 只要您的进程忙于处理具有相同或更高优先级的 socket 、 Timer 、 signal ， ev_idle 在此期间就不会被触发. 而一旦您的进程长期处于 空闲状态 , ev_idle 则会在每次事件迭代中被调用一次直到被主动停止. 或者, 您的进程在此期间被更高优先级的事件所占用. ev_idle 还有一个应用场景就是可以做为 伪后台程序 的方式运行, 比如在事件处理完毕之后做一些需要延迟善后的工作."},"api/idle.html#相关函数":{"title":"相关函数","path":"/api/idle.html#相关函数","body":"ev_idle_init (ev_idle *, callback) ev_idle_start (struct ev_loop , ev_idle ) 初始化、激活 ev_idle , 他没有任何其他有意义的参数. ev_set_idle 也没有什么意义."},"api/idle.html#使用示例":{"title":"使用示例","path":"/api/idle.html#使用示例","body":"启动 ev_idle 并且输出” Hello world “后退出: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // 只需导入单个头文件 # include ev.h # include stdio.h // 输出后退出. static void idle_cb (struct ev_loop *loop, ev_idle *w, int revents) { puts ( \"Hello world.\" ); ev_break(loop, EVBREAK_ALL); } int main ( void ) { // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; ev_idle idle; ev_idle_init(&amp;idle, idle_cb); ev_idle_start(loop, &amp;idle); // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ; }"},"api/child.html":{"title":"ev_child 的使用方式","path":"/api/child.html","body":"基本介绍 1. 关注进程状态变更 当您因为子进程状态变更而收到 SIGCHLD 的时候, 注册的 ev_child 则会触发. 在进入事件循环之前调用 fork 后注册 ev_child , 然在运行事件循环期间就可以工作的很好. 但如果在运行时间循环期间 fork 后在注册 ev_child 则不行. 并且, 只有默认事件循环能够处理此信号, 因此只能在默认事件循环中注册 ev_child 。 2. 进程的相互作用 一旦默认的事件循环初始化, Libev 就能捕获到 SIGCHILD . 即使第一个子进程退出后才启动 ev_child , 这样中初始化顺序对 保证正确性 重要. SIGCHLD 的接收一定是异步的. 但是为了让其作为事件循环一部分, 进程状态获取则是同步的. Libev 会接收到所有子进程的信号, 无论您是否关注它们的状态. 3. 覆盖内置处理方法 Libev 没有提供重写内置 SIGCHILD 处理的特殊支持, 虽然您可以通过自行注册 SIGCHILD 处理程序. 但是我建议您最好使用 Libev 基于事件的机制来处理, 这样您不必再为单独为它做额外的工作了. 4. 停止 ev_child 目前为止! 即使子进程终止或者退出 ev_child 也不会主动退出, 通常需要手动调用来停止运行. 但是在未来的版本可能会在检测的子进程退出后自动停止 ev_child , 并且 ev_child_stop 调用多次不是问题. 相关函数 ev_child_init (ev_child *, callback, int pid, int trace) ev_child_set (ev_child *, int pid, int trace) 配置 ev_child 观察 pid 指向的子进程ID的状态变化.可以在回调函数里通过观察 rstatus 成员来查看状态(使用 sys/wait.h 中的宏并查看您的系统 waitpid 文档), rpid 成员包含了导致变换的进程 ID . trace 则必须是 0 或者 1 . trace 为 0 表示仅关注进程终止的状态. trace 为 1 表示仅关注进程暂停、继续的状态. int pid [read-only] 表示关注的 pid ; 为 0 表示监视所有资金进程. int rpid [read-only] 表示检测到状态变更的子进程 ID . int rstatus [read-only] 导致的进程退出/跟踪状态.(更多内容请参阅 sys/wait.h 与 waitpid 的文档). 使用示例 启动子进程后在1秒后退出, 主进程收到退出后打印消息也退出: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // 只需导入单个头文件 # include ev.h # include stdio.h # include stdlib.h # include unistd.h // 当使用了键盘的组合键`CTRL`+`C`之后回调会被调用. static void child_cb (struct ev_loop *loop, ev_child *w, int revents)  printf ( \"Loop ot ProcessID: %d, Process status: %d\\n\" , w-rpid, w-rstatus); ev_break(loop, EVBREAK_ALL);  int main ( void )  // 调用`fork`创建并分离父子进程 int id = fork(); if (id == -1 )  puts ( \"Failed to create child process.\" ); exit (EXIT_FAILURE);  // 如果id == 0就是子进程. if (!id)  sleep( 1 ); puts ( \"Child process exit.\" ); exit (EXIT_SUCCESS);  // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; ev_child child; ev_child_init(&amp;child, child_cb, 0 , 0 ); ev_child_start(loop, &amp;child); // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ; "},"api/child.html#基本介绍":{"title":"基本介绍","path":"/api/child.html#基本介绍","body":"1. 关注进程状态变更 当您因为子进程状态变更而收到 SIGCHLD 的时候, 注册的 ev_child 则会触发. 在进入事件循环之前调用 fork 后注册 ev_child , 然在运行事件循环期间就可以工作的很好. 但如果在运行时间循环期间 fork 后在注册 ev_child 则不行. 并且, 只有默认事件循环能够处理此信号, 因此只能在默认事件循环中注册 ev_child 。 2. 进程的相互作用 一旦默认的事件循环初始化, Libev 就能捕获到 SIGCHILD . 即使第一个子进程退出后才启动 ev_child , 这样中初始化顺序对 保证正确性 重要. SIGCHLD 的接收一定是异步的. 但是为了让其作为事件循环一部分, 进程状态获取则是同步的. Libev 会接收到所有子进程的信号, 无论您是否关注它们的状态. 3. 覆盖内置处理方法 Libev 没有提供重写内置 SIGCHILD 处理的特殊支持, 虽然您可以通过自行注册 SIGCHILD 处理程序. 但是我建议您最好使用 Libev 基于事件的机制来处理, 这样您不必再为单独为它做额外的工作了. 4. 停止 ev_child 目前为止! 即使子进程终止或者退出 ev_child 也不会主动退出, 通常需要手动调用来停止运行. 但是在未来的版本可能会在检测的子进程退出后自动停止 ev_child , 并且 ev_child_stop 调用多次不是问题."},"api/child.html#相关函数":{"title":"相关函数","path":"/api/child.html#相关函数","body":"ev_child_init (ev_child *, callback, int pid, int trace) ev_child_set (ev_child *, int pid, int trace) 配置 ev_child 观察 pid 指向的子进程ID的状态变化.可以在回调函数里通过观察 rstatus 成员来查看状态(使用 sys/wait.h 中的宏并查看您的系统 waitpid 文档), rpid 成员包含了导致变换的进程 ID . trace 则必须是 0 或者 1 . trace 为 0 表示仅关注进程终止的状态. trace 为 1 表示仅关注进程暂停、继续的状态. int pid [read-only] 表示关注的 pid ; 为 0 表示监视所有资金进程. int rpid [read-only] 表示检测到状态变更的子进程 ID . int rstatus [read-only] 导致的进程退出/跟踪状态.(更多内容请参阅 sys/wait.h 与 waitpid 的文档)."},"api/child.html#使用示例":{"title":"使用示例","path":"/api/child.html#使用示例","body":"启动子进程后在1秒后退出, 主进程收到退出后打印消息也退出: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // 只需导入单个头文件 # include ev.h # include stdio.h # include stdlib.h # include unistd.h // 当使用了键盘的组合键`CTRL`+`C`之后回调会被调用. static void child_cb (struct ev_loop *loop, ev_child *w, int revents) { printf ( \"Loop ot ProcessID: %d, Process status: %d\\n\" , w-rpid, w-rstatus); ev_break(loop, EVBREAK_ALL); } int main ( void ) { // 调用`fork`创建并分离父子进程 int id = fork(); if (id == -1 ) { puts ( \"Failed to create child process.\" ); exit (EXIT_FAILURE); } // 如果id == 0就是子进程. if (!id) { sleep( 1 ); puts ( \"Child process exit.\" ); exit (EXIT_SUCCESS); } // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; ev_child child; ev_child_init(&amp;child, child_cb, 0 , 0 ); ev_child_start(loop, &amp;child); // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ; }"},"api/io.html":{"title":"ev_io 的使用方式","path":"/api/io.html","body":"基本介绍 ev_io 是这对 I/O 观察者, 通过注册组合事件来监视状态变更. 1. 文件描述符的”读”与”写” I/O 观察者会在每次事件循环迭代中检查注册的文件描述符是否可读、可写. 准确来说: 每次报告 “读” 事件时, 要么内核缓冲区有可被读取的数据, 要么文件描述符状态变更(关闭、出错)等. 每次报告 “写” 事件时, 要么内核缓冲区空闲可被写入数据, 要么文件描述符状态变更(连接建立、失败)等. 如果期间对事件后不做任何处理(关闭、停止), 那么观察者每次都会重复的报告事件. 这种行为我们称之为” level-triggering (水平触发)”. 通常我们打开/创建的文件描述符的默认是 阻塞 ( block ), 这意味着我们每次读取数据时都会将进程陷入到内核态. 所以将所有文件描述符都设置为非阻塞模式一般来说是一个好主意. 但, 当您的文件描述符 无法在非阻塞模式下运行 , 那么您必须自己解决如下一些问题: 用额外的事件驱动接口保证事件的准确性. 增加定时器、 SIGALRM 信号等来确保进程不会永久阻塞. 这通常会需要使用者做更多复杂的操作, 所以说如非必要请置为 非阻塞 (non-blocking) . 最后, 当您不想再处理一个文件描述符的 I/O 的事件时请主动停止观察者. 2. 文件描述符”消失” 通常我们在使用一些” 后端 “( epoll 、 kqueue 、 linux aio )的时候, 在注册感兴趣的文件描述符后会主动调用例如 dup2 、 close 等函数, 这些函数会直接影响文件描述符在这些事件接口里的状态. 导致它们可能会有一些出乎意料的行为, 如: 默默丢弃已注册的事件, 让内部发生异常状态. 这时候如果 Libev 也无法有效分辨这个文件描述符的真实性与有效性. 注意: 为了避免这种类似的情况出现, 每次调用这些方法之前最好先停止事件观察者. 3. 文件( File )的事件 许多人希望将文件的 fd (使用 open 打开)注册到事件接口中, 借此希望磁盘访问的读、写也是这样. 然而这样的想法无法如”预期”那般到达, 只要是已打开的 FILE 文件, 那么每次注册后都会立刻获得 “读” 、 “写” 事件. 由于高级通知机制通常不太支持文件( FILE ), 所以您应该如上述那般无法使用它. 但是 Libev 会尽可能的模拟 POSIX 的相关行为, 因为这样做对下面这些行为能提供方便: 关注控制台的 stdin 、 stdout . tty 、 pipe/sockpair 、 unix-domain-socket . 其它特殊设备. 总结来说: 即使文件( FILE )因为使用 异步I/O 来提供服务, 但是当它仍然”能行”的时候选择它也不错. 4. SIGPIPE 的特殊问题 人们似乎都很容易忘记它: 当写入已关闭的管道后您的程序会收到一个 SIGPIPE , 默认情况下它会中止您的程序. 这在编码、调试期间是非常明智的行为, 但是对于后端守护进程来说这是 灾难性行为 . 所以. 当您无法解释程序为什么会悄无声息退出时, 请注意注册信号并忽略 SIGPIPE (或记录进程退出状态, 这会在您事后排查得到很大线索). 5. accept 失败的问题 许多 POSIX 实现的 accept 函数都不会从队列中删除异常的连接. 例如: 大型服务器经常因为文件描述符用完而导致接受失败( ENFILE ), 但是, Libev 还是会在下次事件迭代的时候发出事件. 如果您因此没有做好处理, 则可能在无法排查到问题的情况下发现 CPU 飙升到 100% . 在每次启动服务之前最好将 open files 调整到一个合理的值, 可以有效的避免此类事情发生. 相关函数 ev_io_init (ev_io *, callback, int fd, int events) ev_io_set (ev_io *, int fd, int events) 配置一个 ev_io 观察者, 参数 fd 则是文件描述符. events 则是 EV_READ 、 EV_WRITE 、 EV_READ | EV_WRITE . ev_io_modify (ev_io *, int events) 类似于 ev_io_set , 但是这函数仅更改 events 事件. (在某些支持的后端下这个操作可能会更快) 使用这个函数 Libev 可以假设fd可以引用一个相同的底层文件描述符. 使用 ev_io_set 时则无法做到. ev_io_start (struct ev_loop , ev_io ) 在前面初始化完毕后, 调用这个方法会将 ev_io 注册到内部并启动. 使用示例 注册一个来自控制台的 ev_io 输入事件, 并将输其输出返回到控制台. 直到使用 ctrl + c 退出: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 # include ev.h # include stdio.h # include unistd.h void stdin_cb (struct ev_loop *loop, ev_io *w, int revents)  char buffer[ 4096 ]; memset (buffer, 4096 , 4096 ); read(w-fd, buffer, 4096 ); puts (buffer); printf ( \"等待输入: \\n\" );  int main ( void )  // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; ev_io stdin_watcher; // 在启动一个I/O观察者之前, 我们需要先初始化它. ev_io_init (&amp;stdin_watcher, stdin_cb, /*STDIN_FILENO*/ 0 , EV_READ); // 启动后意味着观察者将在`stdin`变为可读后触发. ev_io_start (loop, &amp;stdin_watcher); printf ( \"等待输入: \\n\" ); // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ; "},"api/io.html#基本介绍":{"title":"基本介绍","path":"/api/io.html#基本介绍","body":"ev_io 是这对 I/O 观察者, 通过注册组合事件来监视状态变更. 1. 文件描述符的”读”与”写” I/O 观察者会在每次事件循环迭代中检查注册的文件描述符是否可读、可写. 准确来说: 每次报告 “读” 事件时, 要么内核缓冲区有可被读取的数据, 要么文件描述符状态变更(关闭、出错)等. 每次报告 “写” 事件时, 要么内核缓冲区空闲可被写入数据, 要么文件描述符状态变更(连接建立、失败)等. 如果期间对事件后不做任何处理(关闭、停止), 那么观察者每次都会重复的报告事件. 这种行为我们称之为” level-triggering (水平触发)”. 通常我们打开/创建的文件描述符的默认是 阻塞 ( block ), 这意味着我们每次读取数据时都会将进程陷入到内核态. 所以将所有文件描述符都设置为非阻塞模式一般来说是一个好主意. 但, 当您的文件描述符 无法在非阻塞模式下运行 , 那么您必须自己解决如下一些问题: 用额外的事件驱动接口保证事件的准确性. 增加定时器、 SIGALRM 信号等来确保进程不会永久阻塞. 这通常会需要使用者做更多复杂的操作, 所以说如非必要请置为 非阻塞 (non-blocking) . 最后, 当您不想再处理一个文件描述符的 I/O 的事件时请主动停止观察者. 2. 文件描述符”消失” 通常我们在使用一些” 后端 “( epoll 、 kqueue 、 linux aio )的时候, 在注册感兴趣的文件描述符后会主动调用例如 dup2 、 close 等函数, 这些函数会直接影响文件描述符在这些事件接口里的状态. 导致它们可能会有一些出乎意料的行为, 如: 默默丢弃已注册的事件, 让内部发生异常状态. 这时候如果 Libev 也无法有效分辨这个文件描述符的真实性与有效性. 注意: 为了避免这种类似的情况出现, 每次调用这些方法之前最好先停止事件观察者. 3. 文件( File )的事件 许多人希望将文件的 fd (使用 open 打开)注册到事件接口中, 借此希望磁盘访问的读、写也是这样. 然而这样的想法无法如”预期”那般到达, 只要是已打开的 FILE 文件, 那么每次注册后都会立刻获得 “读” 、 “写” 事件. 由于高级通知机制通常不太支持文件( FILE ), 所以您应该如上述那般无法使用它. 但是 Libev 会尽可能的模拟 POSIX 的相关行为, 因为这样做对下面这些行为能提供方便: 关注控制台的 stdin 、 stdout . tty 、 pipe/sockpair 、 unix-domain-socket . 其它特殊设备. 总结来说: 即使文件( FILE )因为使用 异步I/O 来提供服务, 但是当它仍然”能行”的时候选择它也不错. 4. SIGPIPE 的特殊问题 人们似乎都很容易忘记它: 当写入已关闭的管道后您的程序会收到一个 SIGPIPE , 默认情况下它会中止您的程序. 这在编码、调试期间是非常明智的行为, 但是对于后端守护进程来说这是 灾难性行为 . 所以. 当您无法解释程序为什么会悄无声息退出时, 请注意注册信号并忽略 SIGPIPE (或记录进程退出状态, 这会在您事后排查得到很大线索). 5. accept 失败的问题 许多 POSIX 实现的 accept 函数都不会从队列中删除异常的连接. 例如: 大型服务器经常因为文件描述符用完而导致接受失败( ENFILE ), 但是, Libev 还是会在下次事件迭代的时候发出事件. 如果您因此没有做好处理, 则可能在无法排查到问题的情况下发现 CPU 飙升到 100% . 在每次启动服务之前最好将 open files 调整到一个合理的值, 可以有效的避免此类事情发生."},"api/io.html#相关函数":{"title":"相关函数","path":"/api/io.html#相关函数","body":"ev_io_init (ev_io *, callback, int fd, int events) ev_io_set (ev_io *, int fd, int events) 配置一个 ev_io 观察者, 参数 fd 则是文件描述符. events 则是 EV_READ 、 EV_WRITE 、 EV_READ | EV_WRITE . ev_io_modify (ev_io *, int events) 类似于 ev_io_set , 但是这函数仅更改 events 事件. (在某些支持的后端下这个操作可能会更快) 使用这个函数 Libev 可以假设fd可以引用一个相同的底层文件描述符. 使用 ev_io_set 时则无法做到. ev_io_start (struct ev_loop , ev_io ) 在前面初始化完毕后, 调用这个方法会将 ev_io 注册到内部并启动."},"api/io.html#使用示例":{"title":"使用示例","path":"/api/io.html#使用示例","body":"注册一个来自控制台的 ev_io 输入事件, 并将输其输出返回到控制台. 直到使用 ctrl + c 退出: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 # include ev.h # include stdio.h # include unistd.h void stdin_cb (struct ev_loop *loop, ev_io *w, int revents) { char buffer[ 4096 ]; memset (buffer, 4096 , 4096 ); read(w-fd, buffer, 4096 ); puts (buffer); printf ( \"等待输入: \\n\" ); } int main ( void ) { // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; ev_io stdin_watcher; // 在启动一个I/O观察者之前, 我们需要先初始化它. ev_io_init (&amp;stdin_watcher, stdin_cb, /*STDIN_FILENO*/ 0 , EV_READ); // 启动后意味着观察者将在`stdin`变为可读后触发. ev_io_start (loop, &amp;stdin_watcher); printf ( \"等待输入: \\n\" ); // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ; }"},"api/loop.html":{"title":"ev_loop 的使用方式","path":"/api/loop.html","body":"基本介绍 Libev 的事件循环对象由 struct ev_loop 定义. 相关函数 1. struct ev_loop *ev_default_loop (unsigned int flags) 此函数将返回” 默认 “的 ev_loop 对象并初始化, 如果您不知道使用哪个事件循环, 请使用这个函数返回的 ev_loop 对象(或通过EV_DEFAULT宏). 如果 ev_loop 已经被初始化, 那么再(多)次调用都只会简单返回同一个对象(即使 flags 不同). 如果尚未初始化, 那么将会根据 flags 创建它. 注意: 此函数不是线程安全的. 所以, 要在多线程使用的时候必须加上互斥锁保证操作的原子性(虽然这种情况极少). 同时” 缺省 “的 ev_loop 对象才可以处理 ev_child . 示例: 1 2 if (!ev_default_loop ( 0 )) fatal ( \"could not initialise libev, bad $LIBEV_FLAGS in environment?\" ); 限制 Libev 仅使用 select 与 poll 后端同时忽略环境配置的示例: 1 ev_default_loop (EVBACKEND_POLL | EVBACKEND_SELECT | EVFLAG_NOENV); flags 参数的描述会在 ev_loop_new 中会详细说明. 2. struct ev_loop *ev_loop_new (unsigned int flags) 此函数创建并初始化一个新的事件循环对象.如果不能初始化循环, 则返回 NULL . 函数的调用是线程安全的. 通常我们会为每一个线程创建一个 ev_loop , 带在主线程中使用” 缺省 “的 ev_loop . flags 参数可以用来指定要使用的特殊行为或特定后端, 而通常情况下可以被指定为 0 (或 EVFLAG_AUTO 宏); 以下是 flags 支持的标志位: EVFLAG_AUTO 默认标志位. 如果您不知道如何选择, 那么最好选择使用它. EVFLAG_NOENV 默认情况下, Libev 会在环境中寻找该环境变量并且覆盖其它特殊设置. 如果指定了此标志位, Libev 则不会再使用 LIBEV_FLAGS 环境变量. 这个标志配置对于开发期间的性能测试、 Bug 检查等配置尤为有用. EVFLAG_FORKCHECK 通过设置此标志位让 Libev 在每次事件迭代中检查 fork ; 通常使用的是 getpid 来进行检查, 这可能会因为内核(系统)的不同对迭代速度有些许影响. 优点则是无需再为 fork 检查担心. 注意: 此标志不能被 LIBEV_FLAGS 重写或指定. EVFLAG_NOINOTIFY 当指定了此标志位, ev_stat 不再尝试使用 inotify 来进行检查. 启用 inotify 则可以让 ev_stat 保存 inotify 的句柄( handle ), 这通常能减少内部消耗. EVFLAG_SIGNALFD 当指定了此标志位, Libev将 使用 signalfd 的 API 来优化 ev_signal 实现信号处理. 这能串行化处理信号数据, 简化线程间的信号处理. 默认情况下 signalfd 不会被使用, 因为这会改变你的信号掩码. EVFLAG_NOSIGMASK 当指定了此标志位, Libev 将避免修改信号掩码. 这意味着当你想接收信号时它们不会被阻塞. 当您希望自己处理信号或希望在特定的线程中处理信号, 它将变得非常有用. EVFLAG_NOTIMERFD 当指定了此标志位, Libev 将不会使用 timerfd 来检查 时间跳跃 . 虽然 Libev 仍能检查 时间跳跃 , 但是这会需要花费更多的时间. 当前会在第一个周期定时器创建的时候开始使用 timerfd , 如果因为各种原因失败, 则会退回到其它方法中完成. EVBACKEND_SELECT ( value 1, portable select backend ) 使用标准的 select(2) 后端, 但是 Libev 会尝试自己调整 fd_set 以达到避免 fds 数量限制. 如果失败, 那么使用 select 后端对 fd 的监控数量会非常低且它非常低效( O(highest_fd) ). 不过, 在监视少量文件描述符事件的后端中它通常是最快的. 此后端将 EV_READ 映射到 readfds 结合上, 将 EV_WRITE 映射到 writefds 集合. EVBACKEND_POLL ( value 2, poll backend ) 使用标准的 poll(2) 后端, 它的复杂度比 select 更高, 但是能解决 fd_set 的稀疏数组与 fds 的文件描述符数量限制. 不过它在拥有大量不活跃 fd 的时候事件通知效率毅然很低 O(total_fds) . 此后端将 EV_READ 映射为 POLLIN | POLLERR | POLLHUP , 将 EV_WRITE 映射为 POLLOUT | POLLERR | POLLHUP . EVBACKEND_EPOLL ( value 4, Linux ) 使用特定于 Linux 的 epoll(7) 接口(适用于 2.6 之后的内核). 对于很少的 fds 比 select 和 poll 稍微慢一点, 但它的扩展性则会更好. 相较于前者的 O(total_fds) , epoll 则是 O(active_fds) . 而指的一提的是作为高级事件驱动接口存在错误的设计. 所幸, 这些都可以被内部额外的编程解决. (译者: 这里相当大一部分是作者对设计的吐槽, 有兴趣的同学自己阅读原文这里不再赘译.) 此后端映射 EV_READ 和 EV_WRITE 的方式与 EVBACKEND_POLL 相同. EVBACKEND_LINUXAIO ( value 64, Linux ) 在 4.18 之后的内核中可以使用特定的 Linux AIO (不是 aio 而是 io_submit )事件接口(但 Libev 只会在 4.19 中启动它). 如果这个后端可用, 那么 可能 值得使用它. 否则, 最好忽略回退选择使用 epoll 较好. Linux AIO 似乎并不是一个通用的后端, 所以 epoll 会作为协助处理无法正常工作的文件描述符. 甚至在出现内核故障的时候, 直接退回到 epoll .(译者: 这里是意译.) 此后端映射 EV_READ 和 EV_WRITE 的方式与 EVBACKEND_POLL 相同. EVBACKEND_KQUEUE ( value 8, most BSD clones ) kqueue 其实特别值得一提, 因为在除 NetBSD 之外的其它 BSD 实现上都有问题( Break ). 然而与 epoll 设计不同的是, 它的这些错误可以在不更改现有 API 的情况下被修复. 所以, 除非您明确指定 EVBACKEND_KQUEUE 否则不会被作为这些平台的首选. kqueue 与 epoll 可扩展性一样, 但是内核的接口更为高效(并不只是说速度). 并且此后端通常在大多数情况下都表现良好. 此后端将 EV_READ 映射到带有 NOTE_EOF 的 EVFILT_READ kevent ，并将 EV_WRITE 映射到带有 NOTE_EOF 的 EVFILT_WRITE kevent . EVBACKEND_DEVPOLL ( value 16, Solaris 8 ) 尚未实现. EVBACKEND_PORT ( value 32, Solaris 10 ) Solaris 10 的事件接口. 虽然它也很慢, 但是仍然能保证 O(active_fds) 的效率. 它在每次循环迭代中，每个活动文件描述符都需要一个系统调用. 所以在少量 fds 中选择使用 select 和 poll 通常会更好. 值得一提的是: 他们( Sun )给出的代码示例都是错的, 但是所幸的是 Libev 能够解决这些白痴问题( work around these idiocies ) 此后端映射 EV_READ 和 EV_WRITE 的方式与 EVBACKEND_POLL 相同. 如果上述一个或多个后端标志被添加到标志值中，那么只有这些后端会被尝试(以相反的顺序). 如果没有指定, 那将尝试 ev_recommended_backends() 中的所有后端。 这个示例尝试创建一个仅使用 epoll 的事件循环: 1 2 3 struct ev_loop * epoller = ev_loop_new ( EVBACKEND_EPOLL | EVFLAG_NOENV ); if (!epoller) fatal ( \"no epoll found here, maybe it hides under your chair\" ); 这个示例假设但如果可用, 请确保使用 kqueue : 1 struct ev_loop * loop = ev_loop_new ( ev_recommended_backends () | EVBACKEND_KQUEUE ); 同样的, 如果可以则希望使用 Linux AIO . 否则, 使用其它后端: 1 struct ev_loop * loop = ev_loop_new ( ev_recommended_backends () | EVBACKEND_LINUXAIO ); 3. int ev_is_default_loop (loop) 如果是” 缺省 “的 loop 返回 true , 否则返回 false . 4. unsigned int ev_iteration (loop) 返回当前 loop 的迭代次数. 5. ev_set_userdata (loop, void data) || void ev_userdata (loop) 设置与获取 loop 的用户自定义对象( void* data ), 这通常用来让 loop 携带一些特殊的对象(上下文). 6. ev_verify (loop) 这个函数根据 EV_VERIFY 宏在内部做一些健壮性、可靠性的检查与验证, 如果发现错误会立即抛出错误消息并调用 abort() . 这通常在开发、调试期间尤为有用, 有利于协助我们排查问题. 而在生产环境中最好避免使用, 过多的检查会影响整体性能. 7. ev_break (loop, how) 可以用来调用 ev_run 提前返回(但必须在处理完所有未处理的事件之后). how 为 EVBREAK_ONE 会返回一层 ev_run 嵌套. how 为 EVBREAK_ALL 会返回所有 ev_run 嵌套. ev_run 返回之后再次调用 ev_run 则会清除 break state . ev_run (外部)调用 ev_break 不会产生任何影响. 8. unsigned int ev_backend (loop) 返回正在使用的后端标志位. 9. ev_run (loop, int flags) 此函数通常在初始化完成所有的观察者并且想开始处理事件之后被调用. 它将向操作系统询问任何新事件 - 调用观察者回调, 然后无限期地重复这个过程. 如果 flags 参数为 0 ，它将在内部持续处理事件，直到不再有事件处于活动状态或主动调用 ev_break . 如果没有更多活动的观察者, 那么此函数将会返回. 请注意, 显示调用 ev_break 来停止事件循环通常是最好的方式. EVRUN_ONCE 查找并处理任何已触发( pending )但未完成的事件. 在至少处理了 1 个事件后 ev_run 将会直接返回. EVRUN_NOWAIT 查找并检查所有事件, 在经过一次迭代后如果没有已触发( pending )但未完成的事件则 ev_run 返回. 下面则是 ev_run 内部大致的运行流程(不保证将来不会改变): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 - 递增`loop`深度. - 重置`ev_break`状态. - 在第1次迭代之前，呼叫所有`pending`中的观察者。 开始循环(`LOOP`): - 如果定义了`EVFLAG_FORKCHECK`宏, 则每次都检查`fork`. - 如果检测到了`fork`, 则根据队列调用所有`fork watcher`. - 根据队列调用所有`prepare watcher`. - 如果调用了`ev_break`, 则直接结束事件循环. - 如果`fork`已经被调用, 分离并且重新创建内核状态避免进程干扰. - 更新未修改的内核状态. - 更新`event loop time` (`ev_now()`). - 如果有必要, 计算休眠和阻塞时间(`EVRUN_NOWAIT`或者没有活跃的观察者则不会导致`sleep`). - 如果指定了I/O休眠时间, 则这里会执行. - 递增循环迭代计数器. - 阻塞进程等待事件来来临. - 根据队列调用所有活跃`I/O`事件 - 更新`event loop time` (`ev_now()`) 避免时间跳跃. - 根据队列处理超时定时器(`ev_timer`). - 根据队列处理周期定时器(`ev_periodic`). - 处理具有高优先级的`idle`事件. - 根据队列处理所有(`ev_check`). - `signal`、`async`、`child` 被作为`I/O`观察者实现并串行化执行. - 如果调用`ev_break`或`flags`为`EVRUN_ONCE`、`EVRUN_NOWAIT`或没有活跃事件, 则结束事件循环. 否则重复上述步奏. 结束(`FINISH`): - 根据情况重置`EV_BREAK`的状态. - 递减`loop`深度 - `ev_run`返回. 使用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // 只需导入单个头文件 # include ev.h int main ( void )  // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ; "},"api/loop.html#基本介绍":{"title":"基本介绍","path":"/api/loop.html#基本介绍","body":"Libev 的事件循环对象由 struct ev_loop 定义."},"api/loop.html#相关函数":{"title":"相关函数","path":"/api/loop.html#相关函数","body":"1. struct ev_loop *ev_default_loop (unsigned int flags) 此函数将返回” 默认 “的 ev_loop 对象并初始化, 如果您不知道使用哪个事件循环, 请使用这个函数返回的 ev_loop 对象(或通过EV_DEFAULT宏). 如果 ev_loop 已经被初始化, 那么再(多)次调用都只会简单返回同一个对象(即使 flags 不同). 如果尚未初始化, 那么将会根据 flags 创建它. 注意: 此函数不是线程安全的. 所以, 要在多线程使用的时候必须加上互斥锁保证操作的原子性(虽然这种情况极少). 同时” 缺省 “的 ev_loop 对象才可以处理 ev_child . 示例: 1 2 if (!ev_default_loop ( 0 )) fatal ( \"could not initialise libev, bad $LIBEV_FLAGS in environment?\" ); 限制 Libev 仅使用 select 与 poll 后端同时忽略环境配置的示例: 1 ev_default_loop (EVBACKEND_POLL | EVBACKEND_SELECT | EVFLAG_NOENV); flags 参数的描述会在 ev_loop_new 中会详细说明. 2. struct ev_loop *ev_loop_new (unsigned int flags) 此函数创建并初始化一个新的事件循环对象.如果不能初始化循环, 则返回 NULL . 函数的调用是线程安全的. 通常我们会为每一个线程创建一个 ev_loop , 带在主线程中使用” 缺省 “的 ev_loop . flags 参数可以用来指定要使用的特殊行为或特定后端, 而通常情况下可以被指定为 0 (或 EVFLAG_AUTO 宏); 以下是 flags 支持的标志位: EVFLAG_AUTO 默认标志位. 如果您不知道如何选择, 那么最好选择使用它. EVFLAG_NOENV 默认情况下, Libev 会在环境中寻找该环境变量并且覆盖其它特殊设置. 如果指定了此标志位, Libev 则不会再使用 LIBEV_FLAGS 环境变量. 这个标志配置对于开发期间的性能测试、 Bug 检查等配置尤为有用. EVFLAG_FORKCHECK 通过设置此标志位让 Libev 在每次事件迭代中检查 fork ; 通常使用的是 getpid 来进行检查, 这可能会因为内核(系统)的不同对迭代速度有些许影响. 优点则是无需再为 fork 检查担心. 注意: 此标志不能被 LIBEV_FLAGS 重写或指定. EVFLAG_NOINOTIFY 当指定了此标志位, ev_stat 不再尝试使用 inotify 来进行检查. 启用 inotify 则可以让 ev_stat 保存 inotify 的句柄( handle ), 这通常能减少内部消耗. EVFLAG_SIGNALFD 当指定了此标志位, Libev将 使用 signalfd 的 API 来优化 ev_signal 实现信号处理. 这能串行化处理信号数据, 简化线程间的信号处理. 默认情况下 signalfd 不会被使用, 因为这会改变你的信号掩码. EVFLAG_NOSIGMASK 当指定了此标志位, Libev 将避免修改信号掩码. 这意味着当你想接收信号时它们不会被阻塞. 当您希望自己处理信号或希望在特定的线程中处理信号, 它将变得非常有用. EVFLAG_NOTIMERFD 当指定了此标志位, Libev 将不会使用 timerfd 来检查 时间跳跃 . 虽然 Libev 仍能检查 时间跳跃 , 但是这会需要花费更多的时间. 当前会在第一个周期定时器创建的时候开始使用 timerfd , 如果因为各种原因失败, 则会退回到其它方法中完成. EVBACKEND_SELECT ( value 1, portable select backend ) 使用标准的 select(2) 后端, 但是 Libev 会尝试自己调整 fd_set 以达到避免 fds 数量限制. 如果失败, 那么使用 select 后端对 fd 的监控数量会非常低且它非常低效( O(highest_fd) ). 不过, 在监视少量文件描述符事件的后端中它通常是最快的. 此后端将 EV_READ 映射到 readfds 结合上, 将 EV_WRITE 映射到 writefds 集合. EVBACKEND_POLL ( value 2, poll backend ) 使用标准的 poll(2) 后端, 它的复杂度比 select 更高, 但是能解决 fd_set 的稀疏数组与 fds 的文件描述符数量限制. 不过它在拥有大量不活跃 fd 的时候事件通知效率毅然很低 O(total_fds) . 此后端将 EV_READ 映射为 POLLIN | POLLERR | POLLHUP , 将 EV_WRITE 映射为 POLLOUT | POLLERR | POLLHUP . EVBACKEND_EPOLL ( value 4, Linux ) 使用特定于 Linux 的 epoll(7) 接口(适用于 2.6 之后的内核). 对于很少的 fds 比 select 和 poll 稍微慢一点, 但它的扩展性则会更好. 相较于前者的 O(total_fds) , epoll 则是 O(active_fds) . 而指的一提的是作为高级事件驱动接口存在错误的设计. 所幸, 这些都可以被内部额外的编程解决. (译者: 这里相当大一部分是作者对设计的吐槽, 有兴趣的同学自己阅读原文这里不再赘译.) 此后端映射 EV_READ 和 EV_WRITE 的方式与 EVBACKEND_POLL 相同. EVBACKEND_LINUXAIO ( value 64, Linux ) 在 4.18 之后的内核中可以使用特定的 Linux AIO (不是 aio 而是 io_submit )事件接口(但 Libev 只会在 4.19 中启动它). 如果这个后端可用, 那么 可能 值得使用它. 否则, 最好忽略回退选择使用 epoll 较好. Linux AIO 似乎并不是一个通用的后端, 所以 epoll 会作为协助处理无法正常工作的文件描述符. 甚至在出现内核故障的时候, 直接退回到 epoll .(译者: 这里是意译.) 此后端映射 EV_READ 和 EV_WRITE 的方式与 EVBACKEND_POLL 相同. EVBACKEND_KQUEUE ( value 8, most BSD clones ) kqueue 其实特别值得一提, 因为在除 NetBSD 之外的其它 BSD 实现上都有问题( Break ). 然而与 epoll 设计不同的是, 它的这些错误可以在不更改现有 API 的情况下被修复. 所以, 除非您明确指定 EVBACKEND_KQUEUE 否则不会被作为这些平台的首选. kqueue 与 epoll 可扩展性一样, 但是内核的接口更为高效(并不只是说速度). 并且此后端通常在大多数情况下都表现良好. 此后端将 EV_READ 映射到带有 NOTE_EOF 的 EVFILT_READ kevent ，并将 EV_WRITE 映射到带有 NOTE_EOF 的 EVFILT_WRITE kevent . EVBACKEND_DEVPOLL ( value 16, Solaris 8 ) 尚未实现. EVBACKEND_PORT ( value 32, Solaris 10 ) Solaris 10 的事件接口. 虽然它也很慢, 但是仍然能保证 O(active_fds) 的效率. 它在每次循环迭代中，每个活动文件描述符都需要一个系统调用. 所以在少量 fds 中选择使用 select 和 poll 通常会更好. 值得一提的是: 他们( Sun )给出的代码示例都是错的, 但是所幸的是 Libev 能够解决这些白痴问题( work around these idiocies ) 此后端映射 EV_READ 和 EV_WRITE 的方式与 EVBACKEND_POLL 相同. 如果上述一个或多个后端标志被添加到标志值中，那么只有这些后端会被尝试(以相反的顺序). 如果没有指定, 那将尝试 ev_recommended_backends() 中的所有后端。 这个示例尝试创建一个仅使用 epoll 的事件循环: 1 2 3 struct ev_loop * epoller = ev_loop_new ( EVBACKEND_EPOLL | EVFLAG_NOENV ); if (!epoller) fatal ( \"no epoll found here, maybe it hides under your chair\" ); 这个示例假设但如果可用, 请确保使用 kqueue : 1 struct ev_loop * loop = ev_loop_new ( ev_recommended_backends () | EVBACKEND_KQUEUE ); 同样的, 如果可以则希望使用 Linux AIO . 否则, 使用其它后端: 1 struct ev_loop * loop = ev_loop_new ( ev_recommended_backends () | EVBACKEND_LINUXAIO ); 3. int ev_is_default_loop (loop) 如果是” 缺省 “的 loop 返回 true , 否则返回 false . 4. unsigned int ev_iteration (loop) 返回当前 loop 的迭代次数. 5. ev_set_userdata (loop, void data) || void ev_userdata (loop) 设置与获取 loop 的用户自定义对象( void* data ), 这通常用来让 loop 携带一些特殊的对象(上下文). 6. ev_verify (loop) 这个函数根据 EV_VERIFY 宏在内部做一些健壮性、可靠性的检查与验证, 如果发现错误会立即抛出错误消息并调用 abort() . 这通常在开发、调试期间尤为有用, 有利于协助我们排查问题. 而在生产环境中最好避免使用, 过多的检查会影响整体性能. 7. ev_break (loop, how) 可以用来调用 ev_run 提前返回(但必须在处理完所有未处理的事件之后). how 为 EVBREAK_ONE 会返回一层 ev_run 嵌套. how 为 EVBREAK_ALL 会返回所有 ev_run 嵌套. ev_run 返回之后再次调用 ev_run 则会清除 break state . ev_run (外部)调用 ev_break 不会产生任何影响. 8. unsigned int ev_backend (loop) 返回正在使用的后端标志位. 9. ev_run (loop, int flags) 此函数通常在初始化完成所有的观察者并且想开始处理事件之后被调用. 它将向操作系统询问任何新事件 - 调用观察者回调, 然后无限期地重复这个过程. 如果 flags 参数为 0 ，它将在内部持续处理事件，直到不再有事件处于活动状态或主动调用 ev_break . 如果没有更多活动的观察者, 那么此函数将会返回. 请注意, 显示调用 ev_break 来停止事件循环通常是最好的方式. EVRUN_ONCE 查找并处理任何已触发( pending )但未完成的事件. 在至少处理了 1 个事件后 ev_run 将会直接返回. EVRUN_NOWAIT 查找并检查所有事件, 在经过一次迭代后如果没有已触发( pending )但未完成的事件则 ev_run 返回. 下面则是 ev_run 内部大致的运行流程(不保证将来不会改变): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 - 递增`loop`深度. - 重置`ev_break`状态. - 在第1次迭代之前，呼叫所有`pending`中的观察者。 开始循环(`LOOP`): - 如果定义了`EVFLAG_FORKCHECK`宏, 则每次都检查`fork`. - 如果检测到了`fork`, 则根据队列调用所有`fork watcher`. - 根据队列调用所有`prepare watcher`. - 如果调用了`ev_break`, 则直接结束事件循环. - 如果`fork`已经被调用, 分离并且重新创建内核状态避免进程干扰. - 更新未修改的内核状态. - 更新`event loop time` (`ev_now()`). - 如果有必要, 计算休眠和阻塞时间(`EVRUN_NOWAIT`或者没有活跃的观察者则不会导致`sleep`). - 如果指定了I/O休眠时间, 则这里会执行. - 递增循环迭代计数器. - 阻塞进程等待事件来来临. - 根据队列调用所有活跃`I/O`事件 - 更新`event loop time` (`ev_now()`) 避免时间跳跃. - 根据队列处理超时定时器(`ev_timer`). - 根据队列处理周期定时器(`ev_periodic`). - 处理具有高优先级的`idle`事件. - 根据队列处理所有(`ev_check`). - `signal`、`async`、`child` 被作为`I/O`观察者实现并串行化执行. - 如果调用`ev_break`或`flags`为`EVRUN_ONCE`、`EVRUN_NOWAIT`或没有活跃事件, 则结束事件循环. 否则重复上述步奏. 结束(`FINISH`): - 根据情况重置`EV_BREAK`的状态. - 递减`loop`深度 - `ev_run`返回."},"api/loop.html#使用示例":{"title":"使用示例","path":"/api/loop.html#使用示例","body":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 // 只需导入单个头文件 # include ev.h int main ( void ) { // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ; }"},"api/signal.html":{"title":"ev_signal 的使用方式","path":"/api/signal.html","body":"基本介绍 ev_signal 主要用来将异步信号转换为同步信号. 1. 收到信号时发信号告诉我. 当进程一次或多次接收到特定的信号时, ev_signal 将会报告一次事件. 尽管我们都知道信号( signal )是完全异步的, 但 Libev 会像普通事件处理那样尽可能同步传递. 如果您希望真正的使用异步信号, 就像是没有 Libev 那样只需要使用 sigaction 即可. 甚至你可以使用 ev_async 从外部信号函数中唤醒事件循环. 允许为统一个信号( signal )创建并配置任意数量的 ev_signal , 但是这只能在同一个 ev_loop 中. 即: 您可以在 loop_1 中观察 SIGINT , loop_2 中观察 SIGIO ; 但不能再 loop_1 与 loop_2 中同时观察 SIGINT . 并且, SIGCHILD 只能在默认的是事件循环中有效. 只有真正启动了 ev_signal 后, Libev 才会向内核注册更改. 因此, 只要您不向 Libev 注册任何信号, Libev 就能正常的与您自己的信号处理程序共存. 2. fork/execve/pthread_create 继承的特殊问题 sigprocmask 与 sigaction 在启动 ev_signal 之后都是未被指定的. 也就是说 Libev 可能会也可能不会阻塞信号, 可能会也可能不会回恢复 sigaction .(参考 EVFLAG_NOSIGMASK ). 虽然这对信号处理没有影响( Libev 不会将信号设置为 SIG_IGN , 所以处理程序将在 execve 上重置为 SIG_DFL ), 但这对信号掩码有影响. 如: 许多程序并不期望某些信号被阻塞. 这意味着在调用 exec 之后, 您应该在子进程将信号掩码重置为 您所认为的任何”默认值” . 确保在子进程中重置信号掩码的最简单方法就是使用 pthread_atfork 来处理. 在新版本的 Libev 之中. 除非您使用 signalfd 的相关 API , 否则信号不会被无限期的阻塞. 3. 线程信号处理的特殊问题 POSIX 线程的信号处理语义有问题. 特别是很多功能( sigfd 、 sigwait 等)只有在一个进程中的所有线程都阻塞信号时才真正起作用, 这很难实现。 当您想要使用 sigwait (或将 Libev 信号处理与您自己的信号处理混合使用), 您可以在创建 ev_loop 的之前, 创建任何线程(或使用完全设置的 sigprocmask 创建线程)之前全局阻塞所有信号并且指定 EVFLAG_NOSIGMASK 来解决此问题. 然后指定其中一个线程作为 信号处理线程 . 你可以通过调动 ev_feed_signal 来传递任何 Libev 感兴趣的信号. 相关函数 ev_signal_init (ev_signal *, callback, int signum) ev_signal_set (ev_signal *, int signum) 将 ev_signal 配置为 signum 所表示的信号编号上的观察程序. int signum [read-only] ev_signal 关注的信号. 使用示例 我们注册一个 SIGINT , 在您按下 ctrl-c 的时候程序退出打印 Bye : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // 只需导入单个头文件 # include ev.h # include stdio.h // 当使用了键盘的组合键`CTRL`+`C`之后回调会被调用. static void sig_cb (struct ev_loop *loop, ev_signal *w, int revents)  puts ( \"Bye.\" ); ev_break(loop, EVBREAK_ALL);  int main ( void )  // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; ev_signal sigint; ev_signal_init(&amp;sigint, sig_cb, SIGINT); ev_signal_start(loop, &amp;sigint); // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ; "},"api/signal.html#基本介绍":{"title":"基本介绍","path":"/api/signal.html#基本介绍","body":"ev_signal 主要用来将异步信号转换为同步信号. 1. 收到信号时发信号告诉我. 当进程一次或多次接收到特定的信号时, ev_signal 将会报告一次事件. 尽管我们都知道信号( signal )是完全异步的, 但 Libev 会像普通事件处理那样尽可能同步传递. 如果您希望真正的使用异步信号, 就像是没有 Libev 那样只需要使用 sigaction 即可. 甚至你可以使用 ev_async 从外部信号函数中唤醒事件循环. 允许为统一个信号( signal )创建并配置任意数量的 ev_signal , 但是这只能在同一个 ev_loop 中. 即: 您可以在 loop_1 中观察 SIGINT , loop_2 中观察 SIGIO ; 但不能再 loop_1 与 loop_2 中同时观察 SIGINT . 并且, SIGCHILD 只能在默认的是事件循环中有效. 只有真正启动了 ev_signal 后, Libev 才会向内核注册更改. 因此, 只要您不向 Libev 注册任何信号, Libev 就能正常的与您自己的信号处理程序共存. 2. fork/execve/pthread_create 继承的特殊问题 sigprocmask 与 sigaction 在启动 ev_signal 之后都是未被指定的. 也就是说 Libev 可能会也可能不会阻塞信号, 可能会也可能不会回恢复 sigaction .(参考 EVFLAG_NOSIGMASK ). 虽然这对信号处理没有影响( Libev 不会将信号设置为 SIG_IGN , 所以处理程序将在 execve 上重置为 SIG_DFL ), 但这对信号掩码有影响. 如: 许多程序并不期望某些信号被阻塞. 这意味着在调用 exec 之后, 您应该在子进程将信号掩码重置为 您所认为的任何”默认值” . 确保在子进程中重置信号掩码的最简单方法就是使用 pthread_atfork 来处理. 在新版本的 Libev 之中. 除非您使用 signalfd 的相关 API , 否则信号不会被无限期的阻塞. 3. 线程信号处理的特殊问题 POSIX 线程的信号处理语义有问题. 特别是很多功能( sigfd 、 sigwait 等)只有在一个进程中的所有线程都阻塞信号时才真正起作用, 这很难实现。 当您想要使用 sigwait (或将 Libev 信号处理与您自己的信号处理混合使用), 您可以在创建 ev_loop 的之前, 创建任何线程(或使用完全设置的 sigprocmask 创建线程)之前全局阻塞所有信号并且指定 EVFLAG_NOSIGMASK 来解决此问题. 然后指定其中一个线程作为 信号处理线程 . 你可以通过调动 ev_feed_signal 来传递任何 Libev 感兴趣的信号."},"api/signal.html#相关函数":{"title":"相关函数","path":"/api/signal.html#相关函数","body":"ev_signal_init (ev_signal *, callback, int signum) ev_signal_set (ev_signal *, int signum) 将 ev_signal 配置为 signum 所表示的信号编号上的观察程序. int signum [read-only] ev_signal 关注的信号."},"api/signal.html#使用示例":{"title":"使用示例","path":"/api/signal.html#使用示例","body":"我们注册一个 SIGINT , 在您按下 ctrl-c 的时候程序退出打印 Bye : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // 只需导入单个头文件 # include ev.h # include stdio.h // 当使用了键盘的组合键`CTRL`+`C`之后回调会被调用. static void sig_cb (struct ev_loop *loop, ev_signal *w, int revents) { puts ( \"Bye.\" ); ev_break(loop, EVBREAK_ALL); } int main ( void ) { // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; ev_signal sigint; ev_signal_init(&amp;sigint, sig_cb, SIGINT); ev_signal_start(loop, &amp;sigint); // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ; }"},"api/stat.html":{"title":"ev_stat 的使用方式","path":"/api/stat.html","body":"基本介绍 1. 文件属性刚刚改变了吗? ev_stat 会监视文件系统的相关属性变更. 准确来说, 它会定期调用 stat (或者操作系统通知)查看对比与上次的变化. 只有在文件确实发生了 状态变更 后才会被报告. 注册 ev_stat 指定的路径可以是”不存在”的, 因为从”不存在”变为”存在”也是一种状态. 路径不得以斜杠结尾或包含特殊符号, 如: &#39;.&#39; 和 &#39;..&#39; . 设置的路径最好是 绝对路径 , 否则 工作目录 的变更可能导致受到影响. 没有通用的事件接口可以知道这些, 所以最好的办法就是在那些平台定期使用 stat 来查询变更. 唯一实现的特定于操作系统的接口是 Linux inotify , kqueue 虽然有一定支持但是无法实现 stat 的完整语义. 即使是操作系统支持也不适合启动大量的 ev_stat , 因为这些资源(I/O、CPU)密集型对性能消耗极大. 2. ABI问题 Libev 使用默认环境时选择的 stat 是 32 位版本的, 当 ABI 改为 64 位的时候使用会失败. 这种情况下, 必须使用同样的 ABI 版本编译来保障二进制兼容性. 解决这个问题的办法是定制发行版的作者默认使用 64 位而并不仅是可选, Libev 不会简单直接的支持, 因为这也需要与编译器、环境进行探测后统计知晓. 3. Inotify 与 KQUEUE 当 inotify 支持已编译到 Libev 并在运行时出现时, 它将尽可能加快更改检测. inotify 描述符将在第一个 ev_stat 启动时延迟创建. inotify 的存在不会改变 ev_stat 的语义, 只是能更早的检测到变更信息并且在某些情况下避免 stat 调用. 然而, 即使存在 inotify 的情况下, 有时候 Libev 也必须使用轮询进行统计. 但是只要 Linux 内核版本在 2.6.25 及以上, Libev 对这些本地文件系统( ext2/3 、 ifs 、 reisefs 、 xfs )上已存在的路径不需要使用轮询. 不支持 kqueue 是因为它显然不能用来实现这个功能, 因为需要在对象上一直打开一个文件描述符, 并且很难检测重命名、断开链接等. 4. stat() 是”同步”操作 Libev 本身通常不执行任何类型的 I/O , 所以一般不会阻塞住进程. ev_stat 则会是一个例外, 因为它是一个同步操作. 对于 本地路径 这通常无关紧要: 除非系统非常繁忙或每次 stat 之间的间隔很大, 否则 stat 调用执行的很快. 因为这时候路劲数据都已经保存在内存中. 但对于远程文件系统, stat() 可能会因为网络问题而长期阻塞. 即使再最好的情况下, 一次 stat 也需要毫秒级别的时间间隔. 因此最好避免在 NFS 等文件系统上使用 ev_stat , 虽然 ev_stat 已经支持这么做. 5. 时间精度的特殊问题 stat() 系统调用最多支持秒级精度, 即使是在更高精度的系统上大多数情况下也只支持秒级. 这意味着, 如果两次更新的周期很短则容易错过. 即: 同一秒内仅更新了时间, ev_stat 则无法检测到(除非在其它数据层面也发生了变更). 解决问题的办法是将每次操作延迟 1.02 秒, 这个 0.02 的偏移值是为了解决时间精度不一致的问题. 相关函数 ev_stat_init (ev_stat , callback, const char path, ev_tstamp interval) ev_stat_set (ev_stat , const char path, ev_tstamp interval) 配置 ev_stat 检查 path 的变更, interval 则是每次检查的间隔(通常是 0 来让 Libev 选择一个合适的值). 当 callback 收到 EV_STAT 事件的时候, 表示 ev_stat 相对于之前检测到了属性变更. ev_stat_stat (loop, ev_stat *) 如果您在上述回调函数中更改了 path 值, 主动调用此函数会立刻更新 stat 的更改. ev_tstamp interval [read-only] 间隔时间. const char *path [read-only] 监视路径. ev_statdata prev [read-only] 检测到变更事件之前的文件属性. 每当 prev != attr 的时候, 这些成员中会有一个或多个不同: st_dev , st_ino , st_mode , st_nlink , st_uid , st_gid , st_rdev , st_size , st_atime , st_mtime , st_ctime . ev_statdata attr [read-only] 最新检测到的变更事件文件属性. 虽然类型是 ev_statdata , 但是通常是是您系统中的 struct stat 类型. 如果 st_nlink 为 0 , 则说明 stat 期间发生了一些错误. 使用示例 本示例演示了 v.log 的文件创建后退出事件循环: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // 只需导入单个头文件 # include ev.h # include stdio.h // 当发现`v.log`文件被创建之后退出. static void stat_cb (struct ev_loop *loop, ev_stat *w, int revents)  puts ( \"Bye.\" ); ev_break(loop, EVBREAK_ALL);  int main ( void )  // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; ev_stat estat; ev_stat_init(&amp;estat, stat_cb, \"v.log\" , 0. ); ev_stat_start(loop, &amp;estat); // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ; "},"api/stat.html#基本介绍":{"title":"基本介绍","path":"/api/stat.html#基本介绍","body":"1. 文件属性刚刚改变了吗? ev_stat 会监视文件系统的相关属性变更. 准确来说, 它会定期调用 stat (或者操作系统通知)查看对比与上次的变化. 只有在文件确实发生了 状态变更 后才会被报告. 注册 ev_stat 指定的路径可以是”不存在”的, 因为从”不存在”变为”存在”也是一种状态. 路径不得以斜杠结尾或包含特殊符号, 如: '.' 和 '..' . 设置的路径最好是 绝对路径 , 否则 工作目录 的变更可能导致受到影响. 没有通用的事件接口可以知道这些, 所以最好的办法就是在那些平台定期使用 stat 来查询变更. 唯一实现的特定于操作系统的接口是 Linux inotify , kqueue 虽然有一定支持但是无法实现 stat 的完整语义. 即使是操作系统支持也不适合启动大量的 ev_stat , 因为这些资源(I/O、CPU)密集型对性能消耗极大. 2. ABI问题 Libev 使用默认环境时选择的 stat 是 32 位版本的, 当 ABI 改为 64 位的时候使用会失败. 这种情况下, 必须使用同样的 ABI 版本编译来保障二进制兼容性. 解决这个问题的办法是定制发行版的作者默认使用 64 位而并不仅是可选, Libev 不会简单直接的支持, 因为这也需要与编译器、环境进行探测后统计知晓. 3. Inotify 与 KQUEUE 当 inotify 支持已编译到 Libev 并在运行时出现时, 它将尽可能加快更改检测. inotify 描述符将在第一个 ev_stat 启动时延迟创建. inotify 的存在不会改变 ev_stat 的语义, 只是能更早的检测到变更信息并且在某些情况下避免 stat 调用. 然而, 即使存在 inotify 的情况下, 有时候 Libev 也必须使用轮询进行统计. 但是只要 Linux 内核版本在 2.6.25 及以上, Libev 对这些本地文件系统( ext2/3 、 ifs 、 reisefs 、 xfs )上已存在的路径不需要使用轮询. 不支持 kqueue 是因为它显然不能用来实现这个功能, 因为需要在对象上一直打开一个文件描述符, 并且很难检测重命名、断开链接等. 4. stat() 是”同步”操作 Libev 本身通常不执行任何类型的 I/O , 所以一般不会阻塞住进程. ev_stat 则会是一个例外, 因为它是一个同步操作. 对于 本地路径 这通常无关紧要: 除非系统非常繁忙或每次 stat 之间的间隔很大, 否则 stat 调用执行的很快. 因为这时候路劲数据都已经保存在内存中. 但对于远程文件系统, stat() 可能会因为网络问题而长期阻塞. 即使再最好的情况下, 一次 stat 也需要毫秒级别的时间间隔. 因此最好避免在 NFS 等文件系统上使用 ev_stat , 虽然 ev_stat 已经支持这么做. 5. 时间精度的特殊问题 stat() 系统调用最多支持秒级精度, 即使是在更高精度的系统上大多数情况下也只支持秒级. 这意味着, 如果两次更新的周期很短则容易错过. 即: 同一秒内仅更新了时间, ev_stat 则无法检测到(除非在其它数据层面也发生了变更). 解决问题的办法是将每次操作延迟 1.02 秒, 这个 0.02 的偏移值是为了解决时间精度不一致的问题."},"api/stat.html#相关函数":{"title":"相关函数","path":"/api/stat.html#相关函数","body":"ev_stat_init (ev_stat , callback, const char path, ev_tstamp interval) ev_stat_set (ev_stat , const char path, ev_tstamp interval) 配置 ev_stat 检查 path 的变更, interval 则是每次检查的间隔(通常是 0 来让 Libev 选择一个合适的值). 当 callback 收到 EV_STAT 事件的时候, 表示 ev_stat 相对于之前检测到了属性变更. ev_stat_stat (loop, ev_stat *) 如果您在上述回调函数中更改了 path 值, 主动调用此函数会立刻更新 stat 的更改. ev_tstamp interval [read-only] 间隔时间. const char *path [read-only] 监视路径. ev_statdata prev [read-only] 检测到变更事件之前的文件属性. 每当 prev != attr 的时候, 这些成员中会有一个或多个不同: st_dev , st_ino , st_mode , st_nlink , st_uid , st_gid , st_rdev , st_size , st_atime , st_mtime , st_ctime . ev_statdata attr [read-only] 最新检测到的变更事件文件属性. 虽然类型是 ev_statdata , 但是通常是是您系统中的 struct stat 类型. 如果 st_nlink 为 0 , 则说明 stat 期间发生了一些错误."},"api/stat.html#使用示例":{"title":"使用示例","path":"/api/stat.html#使用示例","body":"本示例演示了 v.log 的文件创建后退出事件循环: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // 只需导入单个头文件 # include ev.h # include stdio.h // 当发现`v.log`文件被创建之后退出. static void stat_cb (struct ev_loop *loop, ev_stat *w, int revents) { puts ( \"Bye.\" ); ev_break(loop, EVBREAK_ALL); } int main ( void ) { // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; ev_stat estat; ev_stat_init(&amp;estat, stat_cb, \"v.log\" , 0. ); ev_stat_start(loop, &amp;estat); // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ; }"},"base/used.html":{"title":"使用示例","path":"/base/used.html","body":"使用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 // 只需导入单个头文件 # include ev.h # include stdio.h // I/O 观察者 ev_io stdin_watcher; // Timer 观察者 ev_timer timeout_watcher; // 当stdin可读的时候, 这个回调将会被触发. static void stdin_cb (EV_P_ ev_io *w, int revents)  puts ( \"stdin ready\" ); // 如果你只需要获得一次事件, 那么需要主动停止事件观察者. ev_io_stop (EV_A_ w); // 调用此方法后, 会让ev_run停止所有事件. ev_break (EV_A_ EVBREAK_ALL);  // 当超时时间到达, 这个回调将会被触发. static void timeout_cb (EV_P_ ev_timer *w, int revents)  puts ( \"timeout\" ); // 调用此方法后, 会让ev_run停止所有事件. ev_break (EV_A_ EVBREAK_ONE);  int main ( void )  // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; // 在启动一个I/O观察者之前, 我们需要先初始化它. ev_io_init (&amp;stdin_watcher, stdin_cb, /*STDIN_FILENO*/ 0 , EV_READ); // 启动后意味着观察者将在`stdin`变为可读后触发. ev_io_start (loop, &amp;stdin_watcher); // 在启动一个Timer观察者之前, 我们需要先初始化它. ev_timer_init (&amp;timeout_watcher, timeout_cb, 5.5 , 0. ); // 这个一次性定时器将会从启动开始后的`5.5`秒后超时触发. ev_timer_start (loop, &amp;timeout_watcher); // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ;  示例讲解 在示例代码的 1~3 行导入了本章示例所需要的头文件. 在第 35 行我们通过 Libev 的宏获的了一个缺省的 ev_loop 对象. 随后的 43~51 行之间分别注册了 ev_io 与 ev_timer 2个事件. 注册这 2 个事件的实际含义为: 在 5.5 秒内 ev_timer 将必然会超时退出; 在 stdin 输入任意字符后按 Enter 键退出. 我们在 48 行调用 ev_run 进入循环等待事件发生. 用户输入字符后或超时到期调用 20 行或 29 行的 ev_break 退出事件循环. ev_run 函数最终返回, 进程也在此执行完毕退出. 终端最终输出 timeout 或 stdin ready ."},"base/used.html#使用示例":{"title":"使用示例","path":"/base/used.html#使用示例","body":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 // 只需导入单个头文件 # include ev.h # include stdio.h // I/O 观察者 ev_io stdin_watcher; // Timer 观察者 ev_timer timeout_watcher; // 当stdin可读的时候, 这个回调将会被触发. static void stdin_cb (EV_P_ ev_io *w, int revents) { puts ( \"stdin ready\" ); // 如果你只需要获得一次事件, 那么需要主动停止事件观察者. ev_io_stop (EV_A_ w); // 调用此方法后, 会让ev_run停止所有事件. ev_break (EV_A_ EVBREAK_ALL); } // 当超时时间到达, 这个回调将会被触发. static void timeout_cb (EV_P_ ev_timer *w, int revents) { puts ( \"timeout\" ); // 调用此方法后, 会让ev_run停止所有事件. ev_break (EV_A_ EVBREAK_ONE); } int main ( void ) { // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; // 在启动一个I/O观察者之前, 我们需要先初始化它. ev_io_init (&amp;stdin_watcher, stdin_cb, /*STDIN_FILENO*/ 0 , EV_READ); // 启动后意味着观察者将在`stdin`变为可读后触发. ev_io_start (loop, &amp;stdin_watcher); // 在启动一个Timer观察者之前, 我们需要先初始化它. ev_timer_init (&amp;timeout_watcher, timeout_cb, 5.5 , 0. ); // 这个一次性定时器将会从启动开始后的`5.5`秒后超时触发. ev_timer_start (loop, &amp;timeout_watcher); // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ; }"},"base/used.html#示例讲解":{"title":"示例讲解","path":"/base/used.html#示例讲解","body":"在示例代码的 1~3 行导入了本章示例所需要的头文件. 在第 35 行我们通过 Libev 的宏获的了一个缺省的 ev_loop 对象. 随后的 43~51 行之间分别注册了 ev_io 与 ev_timer 2个事件. 注册这 2 个事件的实际含义为: 在 5.5 秒内 ev_timer 将必然会超时退出; 在 stdin 输入任意字符后按 Enter 键退出. 我们在 48 行调用 ev_run 进入循环等待事件发生. 用户输入字符后或超时到期调用 20 行或 29 行的 ev_break 退出事件循环. ev_run 函数最终返回, 进程也在此执行完毕退出. 终端最终输出 timeout 或 stdin ready ."},"api/timer.html":{"title":"ev_timer 的使用方式","path":"/api/timer.html","body":"基本介绍 ev_timer 是相对计时器观察者, 通过设置指定的超时时间与可选的重复触发时间. 1. 选择”更好”的超时方式 在现实世界中的许多超时是为了解决某些问题, 例如: http 请求时间太长, 我们需要在一定时间后引发异常. 下面有一些简单的示例来说明, 从” 简单低效 “到” 复杂高效 “. 例如，每次接收到一些数据时重置下次 60 秒: 使用 ev_timer_init 与 ev_timer_start 每次激活计时器: 这是最明显但不是最简单的方法: 1 2 ev_timer_init (timer, callback, 60. , 0. ); ev_timer_start (loop, timer); 然后在每次触发后将计时器时间重置: 1 2 3 ev_timer_stop (loop, timer); ev_timer_set (timer, 60. , 0. ); ev_timer_start (loop, timer); 这样实现非常简单, 但是因为每次需要删除后重新激活. Libev 必须将其从最小堆结构中删除后重新添加, 这样的操作几乎很难保证是常量级( constant-time )的. 同样的启动方式, 但是使用 ev_timer_again 调整时间: 最简单的方式就是使用 ev_timer_again 来代替 ev_timer_start , 要实现的话必须直接使用 ev_init 与指定方式配置一个重复计时器. 这意味着你可以忽略 ev_timer_start 函数和 ev_timer_set 的 after 参数, 并且只是使用 repeat 成员与 ev_timer_again 函数. 比如, 这样激活计时器: 1 2 3 ev_init (timer, callback); timer-repeat = 60. ; ev_timer_again (loop, timer); 甚至随时更改超时, 无论它是否处于活跃状态: 1 2 timer-repeat = 30. ; ev_timer_again (loop, timer); 这显然比第 1 种方式更加高效, 应为这样能避免 Libev 在内部完全删除数据结构后又重新将其插入进去. 当然, 这种方式也仅此而已了. 通过计算相对超时时间, 然后根据需要重置它: 首先, 计算超时发生所需要的时间(通过计算绝对时间减去相对时间与最后活跃时间). 如果值为负数说明超时已到, 正常处理超时任务即可. 否则我们将时间设置为最早一个等待触发的计时器并且启动. 换句话说, 每次调用回调的时候都会检查是否发生超时. 如果没有的话, 它只会简单的重新让自己在下一次最早触发的时间点进行检查. 然后重复以上动作. 这个方法需要更多的回调次数, 但实际上不会更改 Libev 调用来更改超时时间. 在首次启动的时候, 只需初始化观察者并将最后活跃时间( last_activity )设置为当前时间. 然后调用回调, 启动计时器: 1 2 3 last_activity = ev_now (EV_A); ev_init (&amp;timer, callback); callback (EV_A_ &amp;timer, 0 ); 当有其中一些超时. 只需要将当前时间记录即可, 而不会实际调用 libev 更改: 1 2 if (activity detected) last_activity = ev_now (EV_A); 当超时周期更改, 则可以通过简单的参数替换、停止计时器、立即调用回调来解决: 1 2 3 timeout = new_value; ev_timer_stop (EV_A_ &amp;timer); callback (EV_A_ &amp;timer, 0 ); 这种实现较为复杂, 在超时周期较长的、不太可能真正超时的场景下尤为有用. 使用排序双向链表: 如果计时器需求量非常大(成千上万, 甚至数百万), 并且它们都具有某种超时特性( timeout value )那可以做的更好. 比如: 使用链表头部来作为最近超时计算, 如果发现一些活跃的计时器则可以从中处理并且删除(如果是重复超时则插入到链表尾部). 确保更新 ev_timer 如果它是从开头获取的, 这样可以以 O(1) 的复杂度管理近乎无限的(已内存而定)超时操作(启动、停止、更新). 但是这样的代价则是实现复杂度. 除了保证恒定的超时时间外, 还需要确保链表的有序性. 哪种方式”最好”的呢? 方法 2 几乎简单到无需思考, 在大多数情况下都能满足需求. 方法 3 需要思考更多但也不会非常复杂. 虽然方法 3 在普通情况下会更好, 但是这两者选其中任何一个都可以. 方法 1 始终不是一个好选择, 并且不会给你带来任何好处. 方法 4 则非常复杂, 但是会更加有效. (这种有效被认为是 过度设计 ) 2. 非同步时钟的特殊问题 现代操作系统”时钟”多种多样 - Libev 使用普通的 挂钟 ( wall clock )模型运行, 如果可以使用 单调时钟 ( monotonic clock )来避免时间跳跃. 这些时钟都不会与彼此进行同步, 因此 ev_time() 可能返回与 gettimeofday() 或 time() 大不相同的时间. 例如，在 GNU/Linux 系统上，调用他们之间的差值可能会高 1 秒. 由于时间不同步, 还会出现另一个问题: Libev 使用的是 单调时钟 ( monotonic clock ), 从启动计时器到回调的期间您比较 ev_time 或 ev_now 的时间戳, 就会发现回调被提前调用了. 这是因为 ev_timer 参照实际时间而非 挂钟 ( wall clock )时间, 所以 Libev 必须确保回调必须在时间到来之前没被调用. 测量参考的是实际时间而非系统时钟. 如果恰好您是基于物理时间尺度计算超时(例如: “在 100 秒后超时连接”), 那么这对您来说应该是正确的行为. 3. “假死”的特殊问题 当您遇到挂起、休眠等机器, 这期间时间会发生什么变化呢? 使用 Linux 2.6.28 进行的一些快速测试表明: 挂起( suspend )会暂停所有进程, 而时钟( CLOCK_MONOTONIC )会继续运行直到系统从挂起中恢复. 这意味着恢复后, 对程序来说就想只过去了几秒钟. 而如果此时使用 单调时钟 ( monotonic clock )源, 暂停期间的事件则不会被计入 ev_timer 当中. 如果使用 实时时钟(Real Time) 超时则会被提前, 并且 Libev 会检测到挂起并调整好计时器. 在不同的操作系统、操作系统版本甚至不同的硬件上看到不同的行为. 4. 时间更新的特殊问题 获取当前时间是一个昂贵的操作(至少需要一个系统调用周期): 因此 Libev 仅在 ev_run 收集新事件之前和之后更新其当前时间，这导致在一次迭代中处理大量事件时, ev_now() 和 ev_time() 之间的差异越来越大. 相对超时是根据 ev_now() 时间计算的. 这通常是正确的，因为这个时间戳指的是触发您正在修改/启动的超时的事件的时间。如果你怀疑事件处理被延迟，你需要基于当前时间的超时，使用如下的东西来调整它: 1 ev_timer_set (&amp;timer, after + (ev_time () - ev_now ()), 0. ); 如果事件循环被长期暂停, 您也可以使用 ev_now_update() 来强制更新 ev_now() 返回的时间. 尽管这样做会将后续事件继续推迟. 相关函数 ev_timer_init (ev_timer *, callback, ev_tstamp after, ev_tstamp repeat) ev_timer_set (ev_timer *, ev_tstamp after, ev_tstamp repeat) 将计时器配置为在 after 秒后触发(支持小数和负值). 如果 repeat 为 0. , 那么超时时间一到则会自动停止. 否则计时器会自动配置为在 repeat 秒后无限重复触发, 直到它被主动调用停止. ev_timer_again (loop, ev_timer *) 它的所有确切语义如下所示: 如果计时器已经挂起( pending )待处理, 调用此函数则清除状态. 如果计时器已启动但不是循环计时器, 调用此函数则会停止它. 如果计时器正在重复执行期间, 调用此函数则会根据 repeat 值重新设置重复时间并启动. 这听起来有点复杂, 可以参考前面的描述仔细品味. ev_tstamp ev_timer_remaining (loop, ev_timer *) 返回计时器触发前的剩余时间. 如果计时器处于活动状态，那么这个时间是相对于当前事件循环时间的，否则就是当前配置的超时值. 例如: 在调用 ev_timer_set(w, 5, 7) 之后 ev_timer_remaining 返回 5 , 当计时器启动并经过 1 秒后 ev_timer_remaining 返回的是 4 . 当计时器到期重新启动时它会返回大约 7 (左右)等等. ev_tstamp repeat [read-write] repeat 表示每次重复超时的值. 将在每次观察者超时或调用 ev_timer_again 时使用, 并确定下一次超时(如果有的话)，这也是考虑任何修改时. 使用示例 创建一个 3 秒后超时的示例: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // 只需导入单个头文件 # include ev.h # include stdio.h # include unistd.h // 当超时时间到达, 这个回调将会被触发. static void timeout_cb (struct ev_loop *loop, ev_timer *w, int revents)  puts ( \"timeout\" );  int main ( void )  // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; ev_timer timeout_watcher; ev_timer_init (&amp;timeout_watcher, timeout_cb, 3. , 0. ); ev_timer_start (loop, &amp;timeout_watcher); // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ;  创建一个 3 秒后超时, 之后每隔 1 秒超时的示例: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // 只需导入单个头文件 # include ev.h # include stdio.h # include unistd.h // 当超时时间到达, 这个回调将会被触发. static void timeout_cb (struct ev_loop *loop, ev_timer *w, int revents)  puts ( \"timeout\" );  int main ( void )  // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; ev_timer timeout_watcher; ev_timer_init (&amp;timeout_watcher, timeout_cb, 3. , 1. ); ev_timer_start (loop, &amp;timeout_watcher); // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ; "},"api/timer.html#基本介绍":{"title":"基本介绍","path":"/api/timer.html#基本介绍","body":"ev_timer 是相对计时器观察者, 通过设置指定的超时时间与可选的重复触发时间. 1. 选择”更好”的超时方式 在现实世界中的许多超时是为了解决某些问题, 例如: http 请求时间太长, 我们需要在一定时间后引发异常. 下面有一些简单的示例来说明, 从” 简单低效 “到” 复杂高效 “. 例如，每次接收到一些数据时重置下次 60 秒: 使用 ev_timer_init 与 ev_timer_start 每次激活计时器: 这是最明显但不是最简单的方法: 1 2 ev_timer_init (timer, callback, 60. , 0. ); ev_timer_start (loop, timer); 然后在每次触发后将计时器时间重置: 1 2 3 ev_timer_stop (loop, timer); ev_timer_set (timer, 60. , 0. ); ev_timer_start (loop, timer); 这样实现非常简单, 但是因为每次需要删除后重新激活. Libev 必须将其从最小堆结构中删除后重新添加, 这样的操作几乎很难保证是常量级( constant-time )的. 同样的启动方式, 但是使用 ev_timer_again 调整时间: 最简单的方式就是使用 ev_timer_again 来代替 ev_timer_start , 要实现的话必须直接使用 ev_init 与指定方式配置一个重复计时器. 这意味着你可以忽略 ev_timer_start 函数和 ev_timer_set 的 after 参数, 并且只是使用 repeat 成员与 ev_timer_again 函数. 比如, 这样激活计时器: 1 2 3 ev_init (timer, callback); timer-repeat = 60. ; ev_timer_again (loop, timer); 甚至随时更改超时, 无论它是否处于活跃状态: 1 2 timer-repeat = 30. ; ev_timer_again (loop, timer); 这显然比第 1 种方式更加高效, 应为这样能避免 Libev 在内部完全删除数据结构后又重新将其插入进去. 当然, 这种方式也仅此而已了. 通过计算相对超时时间, 然后根据需要重置它: 首先, 计算超时发生所需要的时间(通过计算绝对时间减去相对时间与最后活跃时间). 如果值为负数说明超时已到, 正常处理超时任务即可. 否则我们将时间设置为最早一个等待触发的计时器并且启动. 换句话说, 每次调用回调的时候都会检查是否发生超时. 如果没有的话, 它只会简单的重新让自己在下一次最早触发的时间点进行检查. 然后重复以上动作. 这个方法需要更多的回调次数, 但实际上不会更改 Libev 调用来更改超时时间. 在首次启动的时候, 只需初始化观察者并将最后活跃时间( last_activity )设置为当前时间. 然后调用回调, 启动计时器: 1 2 3 last_activity = ev_now (EV_A); ev_init (&amp;timer, callback); callback (EV_A_ &amp;timer, 0 ); 当有其中一些超时. 只需要将当前时间记录即可, 而不会实际调用 libev 更改: 1 2 if (activity detected) last_activity = ev_now (EV_A); 当超时周期更改, 则可以通过简单的参数替换、停止计时器、立即调用回调来解决: 1 2 3 timeout = new_value; ev_timer_stop (EV_A_ &amp;timer); callback (EV_A_ &amp;timer, 0 ); 这种实现较为复杂, 在超时周期较长的、不太可能真正超时的场景下尤为有用. 使用排序双向链表: 如果计时器需求量非常大(成千上万, 甚至数百万), 并且它们都具有某种超时特性( timeout value )那可以做的更好. 比如: 使用链表头部来作为最近超时计算, 如果发现一些活跃的计时器则可以从中处理并且删除(如果是重复超时则插入到链表尾部). 确保更新 ev_timer 如果它是从开头获取的, 这样可以以 O(1) 的复杂度管理近乎无限的(已内存而定)超时操作(启动、停止、更新). 但是这样的代价则是实现复杂度. 除了保证恒定的超时时间外, 还需要确保链表的有序性. 哪种方式”最好”的呢? 方法 2 几乎简单到无需思考, 在大多数情况下都能满足需求. 方法 3 需要思考更多但也不会非常复杂. 虽然方法 3 在普通情况下会更好, 但是这两者选其中任何一个都可以. 方法 1 始终不是一个好选择, 并且不会给你带来任何好处. 方法 4 则非常复杂, 但是会更加有效. (这种有效被认为是 过度设计 ) 2. 非同步时钟的特殊问题 现代操作系统”时钟”多种多样 - Libev 使用普通的 挂钟 ( wall clock )模型运行, 如果可以使用 单调时钟 ( monotonic clock )来避免时间跳跃. 这些时钟都不会与彼此进行同步, 因此 ev_time() 可能返回与 gettimeofday() 或 time() 大不相同的时间. 例如，在 GNU/Linux 系统上，调用他们之间的差值可能会高 1 秒. 由于时间不同步, 还会出现另一个问题: Libev 使用的是 单调时钟 ( monotonic clock ), 从启动计时器到回调的期间您比较 ev_time 或 ev_now 的时间戳, 就会发现回调被提前调用了. 这是因为 ev_timer 参照实际时间而非 挂钟 ( wall clock )时间, 所以 Libev 必须确保回调必须在时间到来之前没被调用. 测量参考的是实际时间而非系统时钟. 如果恰好您是基于物理时间尺度计算超时(例如: “在 100 秒后超时连接”), 那么这对您来说应该是正确的行为. 3. “假死”的特殊问题 当您遇到挂起、休眠等机器, 这期间时间会发生什么变化呢? 使用 Linux 2.6.28 进行的一些快速测试表明: 挂起( suspend )会暂停所有进程, 而时钟( CLOCK_MONOTONIC )会继续运行直到系统从挂起中恢复. 这意味着恢复后, 对程序来说就想只过去了几秒钟. 而如果此时使用 单调时钟 ( monotonic clock )源, 暂停期间的事件则不会被计入 ev_timer 当中. 如果使用 实时时钟(Real Time) 超时则会被提前, 并且 Libev 会检测到挂起并调整好计时器. 在不同的操作系统、操作系统版本甚至不同的硬件上看到不同的行为. 4. 时间更新的特殊问题 获取当前时间是一个昂贵的操作(至少需要一个系统调用周期): 因此 Libev 仅在 ev_run 收集新事件之前和之后更新其当前时间，这导致在一次迭代中处理大量事件时, ev_now() 和 ev_time() 之间的差异越来越大. 相对超时是根据 ev_now() 时间计算的. 这通常是正确的，因为这个时间戳指的是触发您正在修改/启动的超时的事件的时间。如果你怀疑事件处理被延迟，你需要基于当前时间的超时，使用如下的东西来调整它: 1 ev_timer_set (&amp;timer, after + (ev_time () - ev_now ()), 0. ); 如果事件循环被长期暂停, 您也可以使用 ev_now_update() 来强制更新 ev_now() 返回的时间. 尽管这样做会将后续事件继续推迟."},"api/timer.html#相关函数":{"title":"相关函数","path":"/api/timer.html#相关函数","body":"ev_timer_init (ev_timer *, callback, ev_tstamp after, ev_tstamp repeat) ev_timer_set (ev_timer *, ev_tstamp after, ev_tstamp repeat) 将计时器配置为在 after 秒后触发(支持小数和负值). 如果 repeat 为 0. , 那么超时时间一到则会自动停止. 否则计时器会自动配置为在 repeat 秒后无限重复触发, 直到它被主动调用停止. ev_timer_again (loop, ev_timer *) 它的所有确切语义如下所示: 如果计时器已经挂起( pending )待处理, 调用此函数则清除状态. 如果计时器已启动但不是循环计时器, 调用此函数则会停止它. 如果计时器正在重复执行期间, 调用此函数则会根据 repeat 值重新设置重复时间并启动. 这听起来有点复杂, 可以参考前面的描述仔细品味. ev_tstamp ev_timer_remaining (loop, ev_timer *) 返回计时器触发前的剩余时间. 如果计时器处于活动状态，那么这个时间是相对于当前事件循环时间的，否则就是当前配置的超时值. 例如: 在调用 ev_timer_set(w, 5, 7) 之后 ev_timer_remaining 返回 5 , 当计时器启动并经过 1 秒后 ev_timer_remaining 返回的是 4 . 当计时器到期重新启动时它会返回大约 7 (左右)等等. ev_tstamp repeat [read-write] repeat 表示每次重复超时的值. 将在每次观察者超时或调用 ev_timer_again 时使用, 并确定下一次超时(如果有的话)，这也是考虑任何修改时. 使用示例 创建一个 3 秒后超时的示例: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // 只需导入单个头文件 # include ev.h # include stdio.h # include unistd.h // 当超时时间到达, 这个回调将会被触发. static void timeout_cb (struct ev_loop *loop, ev_timer *w, int revents) { puts ( \"timeout\" ); } int main ( void ) { // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; ev_timer timeout_watcher; ev_timer_init (&amp;timeout_watcher, timeout_cb, 3. , 0. ); ev_timer_start (loop, &amp;timeout_watcher); // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ; } 创建一个 3 秒后超时, 之后每隔 1 秒超时的示例: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // 只需导入单个头文件 # include ev.h # include stdio.h # include unistd.h // 当超时时间到达, 这个回调将会被触发. static void timeout_cb (struct ev_loop *loop, ev_timer *w, int revents) { puts ( \"timeout\" ); } int main ( void ) { // 可以使用已定义的宏来获取默认的事件循环, 当然你也可以根据自己的需求创建指定的. struct ev_loop * loop = EV_DEFAULT ; ev_timer timeout_watcher; ev_timer_init (&amp;timeout_watcher, timeout_cb, 3. , 1. ); ev_timer_start (loop, &amp;timeout_watcher); // 开始运行事件循环 ev_run (loop, 0 ); // 如果事件循环退出, 那将会执行到这里. return 0 ; }"},"base/install.html":{"title":"下载安装","path":"/base/install.html","body":"版本简述 4.29 之后增加了 io_uring 支持. 4.26-4.28 期间增加与完善 Linux AIO 支持. 4.25 之后增加了 Android 的兼容性支持. 4.00 之后 Linux 支持 signalfd 、 eventfd 、 timerfd 命名规则 我们一般根据版本号来确定当前使用的 libev 版本, 打包后的文件命名规则是以 libev-${version}.tar.gz 形式出现. 注意: 不建议大家激进的跟进新版本, 最新的版本也不一定就是最好的. 下载源码 译者强烈推荐大家从 Libev作者 提供的 服务器 下载源码包, 这样下载期间的软件安全性有保障. 注意: 鉴于国际网络互通的一些问题导致有些同学可能无法访问. 所以本站已经缓存了 2015 年以来的稳定版打包文件, 如有需要可以直接点击链接进行下载: libev-4.33.tar.gz libev-4.27.tar.gz libev-4.25.tar.gz libev-4.24.tar.gz libev-4.23.tar.gz libev-4.22.tar.gz libev-4.20.tar.gz libev-4.19.tar.gz libev-4.18.tar.gz 编译安装 1. 下载源码包 为了保证下载速度, 我们选择上述链接中的 4.33 版本下载到本地: 1 2 3 4 5 6 7 8 9 10 11 12 13 root@iZbp18k2vy63cz9njzffe8Z:~/build # wget https://libev.cn/downloads/libev-4.33.tar.gz --2022-03-14 21:49:43-- https://libev.cn/downloads/libev-4.33.tar.gz Resolving libev.cn (libev.cn)... 185.199.108.153, 185.199.110.153, 185.199.109.153, ... Connecting to libev.cn (libev.cn)|185.199.108.153|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 569527 (556K) [application/gzip] Saving to: ‘libev-4.33.tar.gz’ libev-4.33.tar.gz 100%[======================] 556.18K 36.8KB/s in 18s 2022-03-14 21:50:03 (31.1 KB/s) - ‘libev-4.33.tar.gz’ saved [569527/569527] root@iZbp18k2vy63cz9njzffe8Z:~/build # 2. 安装依赖 为了运行 configure , 需要安装以下工具: autoconf automake libtool make gcc/clang 3. 开始编译 运行 sh autogen.sh 1 2 3 4 5 6 7 8 9 10 root@iZbp18k2vy63cz9njzffe8Z:~/build/libev-4.33 # sh autogen.sh libtoolize: putting auxiliary files in '.' . libtoolize: linking file './ltmain.sh' libtoolize: Consider adding 'AC_CONFIG_MACRO_DIRS([m4])' to configure.ac, libtoolize: and rerunning libtoolize and aclocal. libtoolize: Consider adding '-I m4' to ACLOCAL_AMFLAGS in Makefile.am. configure.ac:12: installing './compile' configure.ac:7: installing './missing' Makefile.am: installing './depcomp' root@iZbp18k2vy63cz9njzffe8Z:~/build/libev-4.33 # 运行 ./configure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 root@iZbp18k2vy63cz9njzffe8Z:~/build/libev-4.33 # ./configure checking for a BSD-compatible install... /usr/bin/install -c checking whether build environment is sane... yes checking for a thread-safe mkdir -p... /usr/bin/mkdir -p checking for gawk... no checking for mawk... mawk checking whether make sets $(MAKE)... yes checking whether make supports nested variables... yes checking whether to enable maintainer-specific portions of Makefiles... no checking for gcc... gcc checking whether the C compiler works... yes checking for C compiler default output file name... a.out checking for suffix of executables... checking whether we are cross compiling... no checking for suffix of object files... o checking whether we are using the GNU C compiler... yes checking whether gcc accepts -g... yes checking for gcc option to accept ISO C89... none needed checking whether gcc understands -c and -o together... yes checking whether make supports the include directive... yes (GNU style) checking dependency style of gcc... gcc3 checking build system type ... x86_64-pc-linux-gnu checking host system type ... x86_64-pc-linux-gnu checking how to print strings... printf checking for a sed that does not truncate output... /usr/bin/sed checking for grep that handles long lines and -e... /usr/bin/grep checking for egrep... /usr/bin/grep -E checking for fgrep... /usr/bin/grep -F checking for ld used by gcc... /usr/bin/ld checking if the linker (/usr/bin/ld) is GNU ld... yes checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B checking the name lister (/usr/bin/nm -B) interface... BSD nm checking whether ln -s works... yes checking the maximum length of command line arguments... 1572864 checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop checking for /usr/bin/ld option to reload object files... -r checking for objdump... objdump checking how to recognize dependent libraries... pass_all checking for dlltool... no checking how to associate runtime and link libraries... printf %s\\n checking for ar... ar checking for archiver @FILE support... @ checking for strip... strip checking for ranlib... ranlib checking command to parse /usr/bin/nm -B output from gcc object... ok checking for sysroot... no checking for a working dd... /usr/bin/dd checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1 checking for mt... mt checking if mt is a manifest tool... no checking how to run the C preprocessor... gcc -E checking for ANSI C header files... yes checking for sys/types.h... yes checking for sys/stat.h... yes checking for stdlib.h... yes checking for string.h... yes checking for memory.h... yes checking for strings.h... yes checking for inttypes.h... yes checking for stdint.h... yes checking for unistd.h... yes checking for dlfcn.h... yes checking for objdir... .libs checking if gcc supports -fno-rtti -fno-exceptions... no checking for gcc option to produce PIC... -fPIC -DPIC checking if gcc PIC flag -fPIC -DPIC works... yes checking if gcc static flag -static works... yes checking if gcc supports -c -o file.o... yes checking if gcc supports -c -o file.o... (cached) yes checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes checking whether -lc should be explicitly linked in ... no checking dynamic linker characteristics... GNU/Linux ld.so checking how to hardcode library paths into programs... immediate checking whether stripping libraries is possible... yes checking if libtool supports shared libraries... yes checking whether to build shared libraries... yes checking whether to build static libraries... yes checking sys/inotify.h usability... yes checking sys/inotify.h presence... yes checking for sys/inotify.h... yes checking sys/epoll.h usability... yes checking sys/epoll.h presence... yes checking for sys/epoll.h... yes checking sys/event.h usability... no checking sys/event.h presence... no checking for sys/event.h... no checking port.h usability... no checking port.h presence... no checking for port.h... no checking poll.h usability... yes checking poll.h presence... yes checking for poll.h... yes checking sys/timerfd.h usability... yes checking sys/timerfd.h presence... yes checking for sys/timerfd.h... yes checking sys/select.h usability... yes checking sys/select.h presence... yes checking for sys/select.h... yes checking sys/eventfd.h usability... yes checking sys/eventfd.h presence... yes checking for sys/eventfd.h... yes checking sys/signalfd.h usability... yes checking sys/signalfd.h presence... yes checking for sys/signalfd.h... yes checking linux/aio_abi.h usability... yes checking linux/aio_abi.h presence... yes checking for linux/aio_abi.h... yes checking linux/fs.h usability... yes checking linux/fs.h presence... yes checking for linux/fs.h... yes checking for inotify_init... yes checking for epoll_ctl... yes checking for kqueue... no checking for port_create... no checking for poll... yes checking for select... yes checking for eventfd... yes checking for signalfd... yes checking for clock_gettime... yes checking for nanosleep... yes checking for __kernel_rwf_t... yes checking for library containing floor... -lm checking that generated files are newer than configure... done configure: creating ./config.status config.status: creating Makefile config.status: creating config.h config.status: executing depfiles commands config.status: executing libtool commands root@iZbp18k2vy63cz9njzffe8Z:~/build/libev-4.33 # 运行 make &amp;&amp; make install 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 root@iZbp18k2vy63cz9njzffe8Z:~/build/libev-4.33 # make &amp;&amp; make install make all-am make[1]: Entering directory '/root/build/libev-4.33' /bin/bash ./libtool --tag=CC --mode=compile gcc -DHAVE_CONFIG_H -I. -g -O3 -MT ev.lo -MD -MP -MF .deps/ev.Tpo -c -o ev.lo ev.c libtool: compile: gcc -DHAVE_CONFIG_H -I. -g -O3 -MT ev.lo -MD -MP -MF .deps/ev.Tpo -c ev.c -fPIC -DPIC -o .libs/ev.o ev.c:2143:31: warning: ‘ev_default_loop_ptr’ initialized and declared ‘extern’ EV_API_DECL struct ev_loop *ev_default_loop_ptr = 0; /* needs to be initialised to make it a definition despite extern */ ^~~~~~~~~~~~~~~~~~~ libtool: compile: gcc -DHAVE_CONFIG_H -I. -g -O3 -MT ev.lo -MD -MP -MF .deps/ev.Tpo -c ev.c -o ev.o /dev/null 2&amp;1 mv -f .deps/ev.Tpo .deps/ev.Plo /bin/bash ./libtool --tag=CC --mode=compile gcc -DHAVE_CONFIG_H -I. -g -O3 -MT event.lo -MD -MP -MF .deps/event.Tpo -c -o event.lo event.c libtool: compile: gcc -DHAVE_CONFIG_H -I. -g -O3 -MT event.lo -MD -MP -MF .deps/event.Tpo -c event.c -fPIC -DPIC -o .libs/event.o libtool: compile: gcc -DHAVE_CONFIG_H -I. -g -O3 -MT event.lo -MD -MP -MF .deps/event.Tpo -c event.c -o event.o /dev/null 2&amp;1 mv -f .deps/event.Tpo .deps/event.Plo /bin/bash ./libtool --tag=CC --mode=link gcc -g -O3 -version-info 4:0:0 -o libev.la -rpath /usr/ local /lib ev.lo event.lo -lm libtool: link: gcc -shared -fPIC -DPIC .libs/ev.o .libs/event.o -lm -g -O3 -Wl,-soname -Wl,libev.so.4 -o .libs/libev.so.4.0.0 libtool: link: ( cd \".libs\" &amp;&amp; rm -f \"libev.so.4\" &amp;&amp; ln -s \"libev.so.4.0.0\" \"libev.so.4\" ) libtool: link: ( cd \".libs\" &amp;&amp; rm -f \"libev.so\" &amp;&amp; ln -s \"libev.so.4.0.0\" \"libev.so\" ) libtool: link: ar cru .libs/libev.a ev.o event.o ar: 'u' modifier ignored since 'D' is the default (see 'U' ) libtool: link: ranlib .libs/libev.a libtool: link: ( cd \".libs\" &amp;&amp; rm -f \"libev.la\" &amp;&amp; ln -s \"../libev.la\" \"libev.la\" ) make[1]: Leaving directory '/root/build/libev-4.33' make[1]: Entering directory '/root/build/libev-4.33' /usr/bin/mkdir -p '/usr/local/lib' /bin/bash ./libtool --mode=install /usr/bin/install -c libev.la '/usr/local/lib' libtool: install: /usr/bin/install -c .libs/libev.so.4.0.0 /usr/ local /lib/libev.so.4.0.0 libtool: install: ( cd /usr/ local /lib &amp;&amp;  ln -s -f libev.so.4.0.0 libev.so.4 ||  rm -f libev.so.4 &amp;&amp; ln -s libev.so.4.0.0 libev.so.4; ; ) libtool: install: ( cd /usr/ local /lib &amp;&amp;  ln -s -f libev.so.4.0.0 libev.so ||  rm -f libev.so &amp;&amp; ln -s libev.so.4.0.0 libev.so; ; ) libtool: install: /usr/bin/install -c .libs/libev.lai /usr/ local /lib/libev.la libtool: install: /usr/bin/install -c .libs/libev.a /usr/ local /lib/libev.a libtool: install: chmod 644 /usr/ local /lib/libev.a libtool: install: ranlib /usr/ local /lib/libev.a libtool: finish: PATH= \"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/sbin\" ldconfig -n /usr/ local /lib ---------------------------------------------------------------------- Libraries have been installed in : /usr/ local /lib If you ever happen to want to link against installed libraries in a given directory, LIBDIR, you must either use libtool, and specify the full pathname of the library, or use the '-LLIBDIR' flag during linking and do at least one of the following: - add LIBDIR to the 'LD_LIBRARY_PATH' environment variable during execution - add LIBDIR to the 'LD_RUN_PATH' environment variable during linking - use the '-Wl,-rpath -Wl,LIBDIR' linker flag - have your system administrator add LIBDIR to '/etc/ld.so.conf' See any operating system documentation about shared libraries for more information, such as the ld(1) and ld.so(8) manual pages. ---------------------------------------------------------------------- /usr/bin/mkdir -p '/usr/local/include' /usr/bin/install -c -m 644 ev.h ev++.h event.h '/usr/local/include' /usr/bin/mkdir -p '/usr/local/share/man/man3' /usr/bin/install -c -m 644 ev.3 '/usr/local/share/man/man3' make[1]: Leaving directory '/root/build/libev-4.33' root@iZbp18k2vy63cz9njzffe8Z:~/build/libev-4.33 # 注意: 上述编译期间如无报错, 那么最终头文件与库文件都将会被安装的 /usr/local 的相关目录下. 测试运行 为了检查我们是否正常安装好, 可以就地编写一个简单的 demo 来进行测试: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # include stdio.h # include ev.h static ev_idle idle; static void idle_cb (struct ev_loop* loop, ev_idle *idle, int revents)  puts ( \"idle start.\" ); ev_idle_stop(loop, idle);  int main ( int argc, char const *argv[])  struct ev_loop * loop = EV_DEFAULT ; // 注册一个空闲事件. ev_idle_init(&amp;idle, idle_cb); ev_idle_start(loop, &amp;idle); ev_run(loop, 0 ); return 0 ;  上述示例注册空闲( idle )事件后进入到事件循环内部, 空闲( idle )事件回调打印输出后立刻调用方法停止. 由于 loop 内部再未注册任何其它事件, 所以 ev_run 将在停止后返回并且整个进程正常退出. 代码完成之后我们手动指定头文件与库文件的路径然后编译运行: 1 2 3 4 root@iZbp18k2vy63cz9njzffe8Z:~/build # cc -o main main.c -L/usr/local/lib -I/usr/local/include/ -lev -Wl,-rpath,/usr/local/lib root@iZbp18k2vy63cz9njzffe8Z:~/build # ./main idle start. root@iZbp18k2vy63cz9njzffe8Z:~/build # 可以看到程序执行成功, Libev 已经本成功安装好了."},"base/install.html#版本简述":{"title":"版本简述","path":"/base/install.html#版本简述","body":"4.29 之后增加了 io_uring 支持. 4.26-4.28 期间增加与完善 Linux AIO 支持. 4.25 之后增加了 Android 的兼容性支持. 4.00 之后 Linux 支持 signalfd 、 eventfd 、 timerfd"},"base/install.html#命名规则":{"title":"命名规则","path":"/base/install.html#命名规则","body":"我们一般根据版本号来确定当前使用的 libev 版本, 打包后的文件命名规则是以 libev-${version}.tar.gz 形式出现. 注意: 不建议大家激进的跟进新版本, 最新的版本也不一定就是最好的."},"base/install.html#下载源码":{"title":"下载源码","path":"/base/install.html#下载源码","body":"译者强烈推荐大家从 Libev作者 提供的 服务器 下载源码包, 这样下载期间的软件安全性有保障. 注意: 鉴于国际网络互通的一些问题导致有些同学可能无法访问. 所以本站已经缓存了 2015 年以来的稳定版打包文件, 如有需要可以直接点击链接进行下载: libev-4.33.tar.gz libev-4.27.tar.gz libev-4.25.tar.gz libev-4.24.tar.gz libev-4.23.tar.gz libev-4.22.tar.gz libev-4.20.tar.gz libev-4.19.tar.gz libev-4.18.tar.gz"},"base/install.html#编译安装":{"title":"编译安装","path":"/base/install.html#编译安装","body":"1. 下载源码包 为了保证下载速度, 我们选择上述链接中的 4.33 版本下载到本地: 1 2 3 4 5 6 7 8 9 10 11 12 13 root@iZbp18k2vy63cz9njzffe8Z:~/build # wget https://libev.cn/downloads/libev-4.33.tar.gz --2022-03-14 21:49:43-- https://libev.cn/downloads/libev-4.33.tar.gz Resolving libev.cn (libev.cn)... 185.199.108.153, 185.199.110.153, 185.199.109.153, ... Connecting to libev.cn (libev.cn)|185.199.108.153|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 569527 (556K) [application/gzip] Saving to: ‘libev-4.33.tar.gz’ libev-4.33.tar.gz 100%[======================] 556.18K 36.8KB/s in 18s 2022-03-14 21:50:03 (31.1 KB/s) - ‘libev-4.33.tar.gz’ saved [569527/569527] root@iZbp18k2vy63cz9njzffe8Z:~/build # 2. 安装依赖 为了运行 configure , 需要安装以下工具: autoconf automake libtool make gcc/clang 3. 开始编译 运行 sh autogen.sh 1 2 3 4 5 6 7 8 9 10 root@iZbp18k2vy63cz9njzffe8Z:~/build/libev-4.33 # sh autogen.sh libtoolize: putting auxiliary files in '.' . libtoolize: linking file './ltmain.sh' libtoolize: Consider adding 'AC_CONFIG_MACRO_DIRS([m4])' to configure.ac, libtoolize: and rerunning libtoolize and aclocal. libtoolize: Consider adding '-I m4' to ACLOCAL_AMFLAGS in Makefile.am. configure.ac:12: installing './compile' configure.ac:7: installing './missing' Makefile.am: installing './depcomp' root@iZbp18k2vy63cz9njzffe8Z:~/build/libev-4.33 # 运行 ./configure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 root@iZbp18k2vy63cz9njzffe8Z:~/build/libev-4.33 # ./configure checking for a BSD-compatible install... /usr/bin/install -c checking whether build environment is sane... yes checking for a thread-safe mkdir -p... /usr/bin/mkdir -p checking for gawk... no checking for mawk... mawk checking whether make sets $(MAKE)... yes checking whether make supports nested variables... yes checking whether to enable maintainer-specific portions of Makefiles... no checking for gcc... gcc checking whether the C compiler works... yes checking for C compiler default output file name... a.out checking for suffix of executables... checking whether we are cross compiling... no checking for suffix of object files... o checking whether we are using the GNU C compiler... yes checking whether gcc accepts -g... yes checking for gcc option to accept ISO C89... none needed checking whether gcc understands -c and -o together... yes checking whether make supports the include directive... yes (GNU style) checking dependency style of gcc... gcc3 checking build system type ... x86_64-pc-linux-gnu checking host system type ... x86_64-pc-linux-gnu checking how to print strings... printf checking for a sed that does not truncate output... /usr/bin/sed checking for grep that handles long lines and -e... /usr/bin/grep checking for egrep... /usr/bin/grep -E checking for fgrep... /usr/bin/grep -F checking for ld used by gcc... /usr/bin/ld checking if the linker (/usr/bin/ld) is GNU ld... yes checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B checking the name lister (/usr/bin/nm -B) interface... BSD nm checking whether ln -s works... yes checking the maximum length of command line arguments... 1572864 checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-gnu format... func_convert_file_noop checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop checking for /usr/bin/ld option to reload object files... -r checking for objdump... objdump checking how to recognize dependent libraries... pass_all checking for dlltool... no checking how to associate runtime and link libraries... printf %s\\n checking for ar... ar checking for archiver @FILE support... @ checking for strip... strip checking for ranlib... ranlib checking command to parse /usr/bin/nm -B output from gcc object... ok checking for sysroot... no checking for a working dd... /usr/bin/dd checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1 checking for mt... mt checking if mt is a manifest tool... no checking how to run the C preprocessor... gcc -E checking for ANSI C header files... yes checking for sys/types.h... yes checking for sys/stat.h... yes checking for stdlib.h... yes checking for string.h... yes checking for memory.h... yes checking for strings.h... yes checking for inttypes.h... yes checking for stdint.h... yes checking for unistd.h... yes checking for dlfcn.h... yes checking for objdir... .libs checking if gcc supports -fno-rtti -fno-exceptions... no checking for gcc option to produce PIC... -fPIC -DPIC checking if gcc PIC flag -fPIC -DPIC works... yes checking if gcc static flag -static works... yes checking if gcc supports -c -o file.o... yes checking if gcc supports -c -o file.o... (cached) yes checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes checking whether -lc should be explicitly linked in ... no checking dynamic linker characteristics... GNU/Linux ld.so checking how to hardcode library paths into programs... immediate checking whether stripping libraries is possible... yes checking if libtool supports shared libraries... yes checking whether to build shared libraries... yes checking whether to build static libraries... yes checking sys/inotify.h usability... yes checking sys/inotify.h presence... yes checking for sys/inotify.h... yes checking sys/epoll.h usability... yes checking sys/epoll.h presence... yes checking for sys/epoll.h... yes checking sys/event.h usability... no checking sys/event.h presence... no checking for sys/event.h... no checking port.h usability... no checking port.h presence... no checking for port.h... no checking poll.h usability... yes checking poll.h presence... yes checking for poll.h... yes checking sys/timerfd.h usability... yes checking sys/timerfd.h presence... yes checking for sys/timerfd.h... yes checking sys/select.h usability... yes checking sys/select.h presence... yes checking for sys/select.h... yes checking sys/eventfd.h usability... yes checking sys/eventfd.h presence... yes checking for sys/eventfd.h... yes checking sys/signalfd.h usability... yes checking sys/signalfd.h presence... yes checking for sys/signalfd.h... yes checking linux/aio_abi.h usability... yes checking linux/aio_abi.h presence... yes checking for linux/aio_abi.h... yes checking linux/fs.h usability... yes checking linux/fs.h presence... yes checking for linux/fs.h... yes checking for inotify_init... yes checking for epoll_ctl... yes checking for kqueue... no checking for port_create... no checking for poll... yes checking for select... yes checking for eventfd... yes checking for signalfd... yes checking for clock_gettime... yes checking for nanosleep... yes checking for __kernel_rwf_t... yes checking for library containing floor... -lm checking that generated files are newer than configure... done configure: creating ./config.status config.status: creating Makefile config.status: creating config.h config.status: executing depfiles commands config.status: executing libtool commands root@iZbp18k2vy63cz9njzffe8Z:~/build/libev-4.33 # 运行 make &amp;&amp; make install 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 root@iZbp18k2vy63cz9njzffe8Z:~/build/libev-4.33 # make &amp;&amp; make install make all-am make[1]: Entering directory '/root/build/libev-4.33' /bin/bash ./libtool --tag=CC --mode=compile gcc -DHAVE_CONFIG_H -I. -g -O3 -MT ev.lo -MD -MP -MF .deps/ev.Tpo -c -o ev.lo ev.c libtool: compile: gcc -DHAVE_CONFIG_H -I. -g -O3 -MT ev.lo -MD -MP -MF .deps/ev.Tpo -c ev.c -fPIC -DPIC -o .libs/ev.o ev.c:2143:31: warning: ‘ev_default_loop_ptr’ initialized and declared ‘extern’ EV_API_DECL struct ev_loop *ev_default_loop_ptr = 0; /* needs to be initialised to make it a definition despite extern */ ^~~~~~~~~~~~~~~~~~~ libtool: compile: gcc -DHAVE_CONFIG_H -I. -g -O3 -MT ev.lo -MD -MP -MF .deps/ev.Tpo -c ev.c -o ev.o /dev/null 2&amp;1 mv -f .deps/ev.Tpo .deps/ev.Plo /bin/bash ./libtool --tag=CC --mode=compile gcc -DHAVE_CONFIG_H -I. -g -O3 -MT event.lo -MD -MP -MF .deps/event.Tpo -c -o event.lo event.c libtool: compile: gcc -DHAVE_CONFIG_H -I. -g -O3 -MT event.lo -MD -MP -MF .deps/event.Tpo -c event.c -fPIC -DPIC -o .libs/event.o libtool: compile: gcc -DHAVE_CONFIG_H -I. -g -O3 -MT event.lo -MD -MP -MF .deps/event.Tpo -c event.c -o event.o /dev/null 2&amp;1 mv -f .deps/event.Tpo .deps/event.Plo /bin/bash ./libtool --tag=CC --mode=link gcc -g -O3 -version-info 4:0:0 -o libev.la -rpath /usr/ local /lib ev.lo event.lo -lm libtool: link: gcc -shared -fPIC -DPIC .libs/ev.o .libs/event.o -lm -g -O3 -Wl,-soname -Wl,libev.so.4 -o .libs/libev.so.4.0.0 libtool: link: ( cd \".libs\" &amp;&amp; rm -f \"libev.so.4\" &amp;&amp; ln -s \"libev.so.4.0.0\" \"libev.so.4\" ) libtool: link: ( cd \".libs\" &amp;&amp; rm -f \"libev.so\" &amp;&amp; ln -s \"libev.so.4.0.0\" \"libev.so\" ) libtool: link: ar cru .libs/libev.a ev.o event.o ar: 'u' modifier ignored since 'D' is the default (see 'U' ) libtool: link: ranlib .libs/libev.a libtool: link: ( cd \".libs\" &amp;&amp; rm -f \"libev.la\" &amp;&amp; ln -s \"../libev.la\" \"libev.la\" ) make[1]: Leaving directory '/root/build/libev-4.33' make[1]: Entering directory '/root/build/libev-4.33' /usr/bin/mkdir -p '/usr/local/lib' /bin/bash ./libtool --mode=install /usr/bin/install -c libev.la '/usr/local/lib' libtool: install: /usr/bin/install -c .libs/libev.so.4.0.0 /usr/ local /lib/libev.so.4.0.0 libtool: install: ( cd /usr/ local /lib &amp;&amp; { ln -s -f libev.so.4.0.0 libev.so.4 || { rm -f libev.so.4 &amp;&amp; ln -s libev.so.4.0.0 libev.so.4; }; }) libtool: install: ( cd /usr/ local /lib &amp;&amp; { ln -s -f libev.so.4.0.0 libev.so || { rm -f libev.so &amp;&amp; ln -s libev.so.4.0.0 libev.so; }; }) libtool: install: /usr/bin/install -c .libs/libev.lai /usr/ local /lib/libev.la libtool: install: /usr/bin/install -c .libs/libev.a /usr/ local /lib/libev.a libtool: install: chmod 644 /usr/ local /lib/libev.a libtool: install: ranlib /usr/ local /lib/libev.a libtool: finish: PATH= \"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/sbin\" ldconfig -n /usr/ local /lib ---------------------------------------------------------------------- Libraries have been installed in : /usr/ local /lib If you ever happen to want to link against installed libraries in a given directory, LIBDIR, you must either use libtool, and specify the full pathname of the library, or use the '-LLIBDIR' flag during linking and do at least one of the following: - add LIBDIR to the 'LD_LIBRARY_PATH' environment variable during execution - add LIBDIR to the 'LD_RUN_PATH' environment variable during linking - use the '-Wl,-rpath -Wl,LIBDIR' linker flag - have your system administrator add LIBDIR to '/etc/ld.so.conf' See any operating system documentation about shared libraries for more information, such as the ld(1) and ld.so(8) manual pages. ---------------------------------------------------------------------- /usr/bin/mkdir -p '/usr/local/include' /usr/bin/install -c -m 644 ev.h ev++.h event.h '/usr/local/include' /usr/bin/mkdir -p '/usr/local/share/man/man3' /usr/bin/install -c -m 644 ev.3 '/usr/local/share/man/man3' make[1]: Leaving directory '/root/build/libev-4.33' root@iZbp18k2vy63cz9njzffe8Z:~/build/libev-4.33 # 注意: 上述编译期间如无报错, 那么最终头文件与库文件都将会被安装的 /usr/local 的相关目录下."},"base/install.html#测试运行":{"title":"测试运行","path":"/base/install.html#测试运行","body":"为了检查我们是否正常安装好, 可以就地编写一个简单的 demo 来进行测试: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # include stdio.h # include ev.h static ev_idle idle; static void idle_cb (struct ev_loop* loop, ev_idle *idle, int revents) { puts ( \"idle start.\" ); ev_idle_stop(loop, idle); } int main ( int argc, char const *argv[]) { struct ev_loop * loop = EV_DEFAULT ; // 注册一个空闲事件. ev_idle_init(&amp;idle, idle_cb); ev_idle_start(loop, &amp;idle); ev_run(loop, 0 ); return 0 ; } 上述示例注册空闲( idle )事件后进入到事件循环内部, 空闲( idle )事件回调打印输出后立刻调用方法停止. 由于 loop 内部再未注册任何其它事件, 所以 ev_run 将在停止后返回并且整个进程正常退出. 代码完成之后我们手动指定头文件与库文件的路径然后编译运行: 1 2 3 4 root@iZbp18k2vy63cz9njzffe8Z:~/build # cc -o main main.c -L/usr/local/lib -I/usr/local/include/ -lev -Wl,-rpath,/usr/local/lib root@iZbp18k2vy63cz9njzffe8Z:~/build # ./main idle start. root@iZbp18k2vy63cz9njzffe8Z:~/build # 可以看到程序执行成功, Libev 已经本成功安装好了."}}}